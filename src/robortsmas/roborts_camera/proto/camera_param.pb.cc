// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_param.proto

#include "camera_param.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_camera_5fparam_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fparam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CameraDistortion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fparam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CameraMatrix;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fparam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Resolution;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fparam_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Camera;
}  // namespace protobuf_camera_5fparam_2eproto
namespace roborts_camera {
class CameraMatrixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraMatrix>
      _instance;
} _CameraMatrix_default_instance_;
class CameraDistortionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraDistortion>
      _instance;
} _CameraDistortion_default_instance_;
class ResolutionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Resolution>
      _instance;
} _Resolution_default_instance_;
class CameraDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Camera>
      _instance;
} _Camera_default_instance_;
class CamerasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cameras>
      _instance;
} _Cameras_default_instance_;
}  // namespace roborts_camera
namespace protobuf_camera_5fparam_2eproto {
static void InitDefaultsCameraMatrix() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_camera::_CameraMatrix_default_instance_;
    new (ptr) ::roborts_camera::CameraMatrix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_camera::CameraMatrix::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CameraMatrix =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraMatrix}, {}};

static void InitDefaultsCameraDistortion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_camera::_CameraDistortion_default_instance_;
    new (ptr) ::roborts_camera::CameraDistortion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_camera::CameraDistortion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CameraDistortion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraDistortion}, {}};

static void InitDefaultsResolution() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_camera::_Resolution_default_instance_;
    new (ptr) ::roborts_camera::Resolution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_camera::Resolution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Resolution =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResolution}, {}};

static void InitDefaultsCamera() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_camera::_Camera_default_instance_;
    new (ptr) ::roborts_camera::Camera();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_camera::Camera::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Camera =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCamera}, {
      &protobuf_camera_5fparam_2eproto::scc_info_CameraMatrix.base,
      &protobuf_camera_5fparam_2eproto::scc_info_CameraDistortion.base,
      &protobuf_camera_5fparam_2eproto::scc_info_Resolution.base,}};

static void InitDefaultsCameras() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_camera::_Cameras_default_instance_;
    new (ptr) ::roborts_camera::Cameras();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_camera::Cameras::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Cameras =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCameras}, {
      &protobuf_camera_5fparam_2eproto::scc_info_Camera.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CameraMatrix.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraDistortion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Resolution.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Camera.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Cameras.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::CameraMatrix, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::CameraMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::CameraMatrix, data_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::CameraDistortion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::CameraDistortion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::CameraDistortion, data_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Resolution, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Resolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Resolution, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Resolution, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Resolution, width_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Resolution, height_offset_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, camera_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, camera_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, camera_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, camera_matrix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, camera_distortion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, fps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, auto_exposure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, exposure_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, exposure_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, auto_white_balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, auto_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Camera, contrast_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  9,
  7,
  8,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Cameras, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Cameras, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_camera::Cameras, camera_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::roborts_camera::CameraMatrix)},
  { 7, 13, sizeof(::roborts_camera::CameraDistortion)},
  { 14, 23, sizeof(::roborts_camera::Resolution)},
  { 27, 45, sizeof(::roborts_camera::Camera)},
  { 58, 64, sizeof(::roborts_camera::Cameras)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_camera::_CameraMatrix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_camera::_CameraDistortion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_camera::_Resolution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_camera::_Camera_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_camera::_Cameras_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "camera_param.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022camera_param.proto\022\016roborts_camera\"\034\n\014"
      "CameraMatrix\022\014\n\004data\030\001 \003(\001\" \n\020CameraDist"
      "ortion\022\014\n\004data\030\001 \003(\001\"X\n\nResolution\022\r\n\005wi"
      "dth\030\001 \002(\r\022\016\n\006height\030\002 \002(\r\022\024\n\014width_offse"
      "t\030\003 \002(\r\022\025\n\rheight_offset\030\004 \002(\r\"\375\002\n\006Camer"
      "a\022\023\n\013camera_name\030\001 \002(\t\022\023\n\013camera_type\030\002 "
      "\002(\t\022\023\n\013camera_path\030\003 \002(\t\0223\n\rcamera_matri"
      "x\030\004 \002(\0132\034.roborts_camera.CameraMatrix\022;\n"
      "\021camera_distortion\030\005 \002(\0132 .roborts_camer"
      "a.CameraDistortion\022\013\n\003fps\030\006 \001(\r\022.\n\nresol"
      "ution\030\007 \001(\0132\032.roborts_camera.Resolution\022"
      "\025\n\rauto_exposure\030\010 \001(\010\022\026\n\016exposure_value"
      "\030\t \001(\r\022\025\n\rexposure_time\030\n \001(\r\022\032\n\022auto_wh"
      "ite_balance\030\013 \001(\010\022\021\n\tauto_gain\030\014 \001(\010\022\020\n\010"
      "contrast\030\r \001(\r\"1\n\007Cameras\022&\n\006camera\030\001 \003("
      "\0132\026.roborts_camera.Camera"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 625);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camera_param.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_camera_5fparam_2eproto
namespace roborts_camera {

// ===================================================================

void CameraMatrix::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraMatrix::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraMatrix::CameraMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fparam_2eproto::scc_info_CameraMatrix.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_camera.CameraMatrix)
}
CameraMatrix::CameraMatrix(const CameraMatrix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:roborts_camera.CameraMatrix)
}

void CameraMatrix::SharedCtor() {
}

CameraMatrix::~CameraMatrix() {
  // @@protoc_insertion_point(destructor:roborts_camera.CameraMatrix)
  SharedDtor();
}

void CameraMatrix::SharedDtor() {
}

void CameraMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraMatrix::descriptor() {
  ::protobuf_camera_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraMatrix& CameraMatrix::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fparam_2eproto::scc_info_CameraMatrix.base);
  return *internal_default_instance();
}


void CameraMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_camera.CameraMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_camera.CameraMatrix)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_camera.CameraMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_camera.CameraMatrix)
  return false;
#undef DO_
}

void CameraMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_camera.CameraMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_camera.CameraMatrix)
}

::google::protobuf::uint8* CameraMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_camera.CameraMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double data = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->data_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_camera.CameraMatrix)
  return target;
}

size_t CameraMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_camera.CameraMatrix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->data_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_camera.CameraMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraMatrix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_camera.CameraMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_camera.CameraMatrix)
    MergeFrom(*source);
  }
}

void CameraMatrix::MergeFrom(const CameraMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_camera.CameraMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void CameraMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_camera.CameraMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraMatrix::CopyFrom(const CameraMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_camera.CameraMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMatrix::IsInitialized() const {
  return true;
}

void CameraMatrix::Swap(CameraMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraMatrix::InternalSwap(CameraMatrix* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraMatrix::GetMetadata() const {
  protobuf_camera_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraDistortion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraDistortion::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraDistortion::CameraDistortion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fparam_2eproto::scc_info_CameraDistortion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_camera.CameraDistortion)
}
CameraDistortion::CameraDistortion(const CameraDistortion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:roborts_camera.CameraDistortion)
}

void CameraDistortion::SharedCtor() {
}

CameraDistortion::~CameraDistortion() {
  // @@protoc_insertion_point(destructor:roborts_camera.CameraDistortion)
  SharedDtor();
}

void CameraDistortion::SharedDtor() {
}

void CameraDistortion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraDistortion::descriptor() {
  ::protobuf_camera_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraDistortion& CameraDistortion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fparam_2eproto::scc_info_CameraDistortion.base);
  return *internal_default_instance();
}


void CameraDistortion::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_camera.CameraDistortion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraDistortion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_camera.CameraDistortion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_camera.CameraDistortion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_camera.CameraDistortion)
  return false;
#undef DO_
}

void CameraDistortion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_camera.CameraDistortion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_camera.CameraDistortion)
}

::google::protobuf::uint8* CameraDistortion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_camera.CameraDistortion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double data = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->data_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_camera.CameraDistortion)
  return target;
}

size_t CameraDistortion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_camera.CameraDistortion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->data_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraDistortion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_camera.CameraDistortion)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraDistortion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraDistortion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_camera.CameraDistortion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_camera.CameraDistortion)
    MergeFrom(*source);
  }
}

void CameraDistortion::MergeFrom(const CameraDistortion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_camera.CameraDistortion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void CameraDistortion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_camera.CameraDistortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDistortion::CopyFrom(const CameraDistortion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_camera.CameraDistortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDistortion::IsInitialized() const {
  return true;
}

void CameraDistortion::Swap(CameraDistortion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraDistortion::InternalSwap(CameraDistortion* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraDistortion::GetMetadata() const {
  protobuf_camera_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Resolution::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resolution::kWidthFieldNumber;
const int Resolution::kHeightFieldNumber;
const int Resolution::kWidthOffsetFieldNumber;
const int Resolution::kHeightOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resolution::Resolution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fparam_2eproto::scc_info_Resolution.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_camera.Resolution)
}
Resolution::Resolution(const Resolution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_offset_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_offset_));
  // @@protoc_insertion_point(copy_constructor:roborts_camera.Resolution)
}

void Resolution::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_offset_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_offset_));
}

Resolution::~Resolution() {
  // @@protoc_insertion_point(destructor:roborts_camera.Resolution)
  SharedDtor();
}

void Resolution::SharedDtor() {
}

void Resolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Resolution::descriptor() {
  ::protobuf_camera_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Resolution& Resolution::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fparam_2eproto::scc_info_Resolution.base);
  return *internal_default_instance();
}


void Resolution::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_camera.Resolution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_offset_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Resolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_camera.Resolution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 width_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height_offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_height_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_camera.Resolution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_camera.Resolution)
  return false;
#undef DO_
}

void Resolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_camera.Resolution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // required uint32 width_offset = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width_offset(), output);
  }

  // required uint32 height_offset = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_camera.Resolution)
}

::google::protobuf::uint8* Resolution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_camera.Resolution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // required uint32 width_offset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width_offset(), target);
  }

  // required uint32 height_offset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_camera.Resolution)
  return target;
}

size_t Resolution::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_camera.Resolution)
  size_t total_size = 0;

  if (has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_width_offset()) {
    // required uint32 width_offset = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width_offset());
  }

  if (has_height_offset()) {
    // required uint32 height_offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height_offset());
  }

  return total_size;
}
size_t Resolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_camera.Resolution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required uint32 width_offset = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width_offset());

    // required uint32 height_offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height_offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resolution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_camera.Resolution)
  GOOGLE_DCHECK_NE(&from, this);
  const Resolution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Resolution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_camera.Resolution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_camera.Resolution)
    MergeFrom(*source);
  }
}

void Resolution::MergeFrom(const Resolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_camera.Resolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_offset_ = from.width_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_offset_ = from.height_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Resolution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_camera.Resolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resolution::CopyFrom(const Resolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_camera.Resolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resolution::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Resolution::Swap(Resolution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resolution::InternalSwap(Resolution* other) {
  using std::swap;
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(width_offset_, other->width_offset_);
  swap(height_offset_, other->height_offset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Resolution::GetMetadata() const {
  protobuf_camera_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Camera::InitAsDefaultInstance() {
  ::roborts_camera::_Camera_default_instance_._instance.get_mutable()->camera_matrix_ = const_cast< ::roborts_camera::CameraMatrix*>(
      ::roborts_camera::CameraMatrix::internal_default_instance());
  ::roborts_camera::_Camera_default_instance_._instance.get_mutable()->camera_distortion_ = const_cast< ::roborts_camera::CameraDistortion*>(
      ::roborts_camera::CameraDistortion::internal_default_instance());
  ::roborts_camera::_Camera_default_instance_._instance.get_mutable()->resolution_ = const_cast< ::roborts_camera::Resolution*>(
      ::roborts_camera::Resolution::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Camera::kCameraNameFieldNumber;
const int Camera::kCameraTypeFieldNumber;
const int Camera::kCameraPathFieldNumber;
const int Camera::kCameraMatrixFieldNumber;
const int Camera::kCameraDistortionFieldNumber;
const int Camera::kFpsFieldNumber;
const int Camera::kResolutionFieldNumber;
const int Camera::kAutoExposureFieldNumber;
const int Camera::kExposureValueFieldNumber;
const int Camera::kExposureTimeFieldNumber;
const int Camera::kAutoWhiteBalanceFieldNumber;
const int Camera::kAutoGainFieldNumber;
const int Camera::kContrastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Camera::Camera()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fparam_2eproto::scc_info_Camera.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_camera.Camera)
}
Camera::Camera(const Camera& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  camera_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_camera_name()) {
    camera_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
  }
  camera_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_camera_type()) {
    camera_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_type_);
  }
  camera_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_camera_path()) {
    camera_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_path_);
  }
  if (from.has_camera_matrix()) {
    camera_matrix_ = new ::roborts_camera::CameraMatrix(*from.camera_matrix_);
  } else {
    camera_matrix_ = NULL;
  }
  if (from.has_camera_distortion()) {
    camera_distortion_ = new ::roborts_camera::CameraDistortion(*from.camera_distortion_);
  } else {
    camera_distortion_ = NULL;
  }
  if (from.has_resolution()) {
    resolution_ = new ::roborts_camera::Resolution(*from.resolution_);
  } else {
    resolution_ = NULL;
  }
  ::memcpy(&fps_, &from.fps_,
    static_cast<size_t>(reinterpret_cast<char*>(&contrast_) -
    reinterpret_cast<char*>(&fps_)) + sizeof(contrast_));
  // @@protoc_insertion_point(copy_constructor:roborts_camera.Camera)
}

void Camera::SharedCtor() {
  camera_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&camera_matrix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contrast_) -
      reinterpret_cast<char*>(&camera_matrix_)) + sizeof(contrast_));
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:roborts_camera.Camera)
  SharedDtor();
}

void Camera::SharedDtor() {
  camera_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete camera_matrix_;
  if (this != internal_default_instance()) delete camera_distortion_;
  if (this != internal_default_instance()) delete resolution_;
}

void Camera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Camera::descriptor() {
  ::protobuf_camera_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Camera& Camera::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fparam_2eproto::scc_info_Camera.base);
  return *internal_default_instance();
}


void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_camera.Camera)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      camera_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      camera_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      camera_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(camera_matrix_ != NULL);
      camera_matrix_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(camera_distortion_ != NULL);
      camera_distortion_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(resolution_ != NULL);
      resolution_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&fps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exposure_value_) -
        reinterpret_cast<char*>(&fps_)) + sizeof(exposure_value_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&exposure_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contrast_) -
        reinterpret_cast<char*>(&exposure_time_)) + sizeof(contrast_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_camera.Camera)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string camera_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_name().data(), static_cast<int>(this->camera_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_camera.Camera.camera_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string camera_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_type().data(), static_cast<int>(this->camera_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_camera.Camera.camera_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string camera_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_path().data(), static_cast<int>(this->camera_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_camera.Camera.camera_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .roborts_camera.CameraMatrix camera_matrix = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .roborts_camera.CameraDistortion camera_distortion = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_distortion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fps = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_fps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .roborts_camera.Resolution resolution = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resolution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool auto_exposure = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_auto_exposure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_exposure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 exposure_value = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_exposure_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exposure_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 exposure_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_exposure_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exposure_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool auto_white_balance = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_auto_white_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_white_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool auto_gain = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_auto_gain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 contrast = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_contrast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contrast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_camera.Camera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_camera.Camera)
  return false;
#undef DO_
}

void Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_camera.Camera)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string camera_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_name().data(), static_cast<int>(this->camera_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_camera.Camera.camera_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->camera_name(), output);
  }

  // required string camera_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_type().data(), static_cast<int>(this->camera_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_camera.Camera.camera_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->camera_type(), output);
  }

  // required string camera_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_path().data(), static_cast<int>(this->camera_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_camera.Camera.camera_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->camera_path(), output);
  }

  // required .roborts_camera.CameraMatrix camera_matrix = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_camera_matrix(), output);
  }

  // required .roborts_camera.CameraDistortion camera_distortion = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_camera_distortion(), output);
  }

  // optional uint32 fps = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fps(), output);
  }

  // optional .roborts_camera.Resolution resolution = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_resolution(), output);
  }

  // optional bool auto_exposure = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->auto_exposure(), output);
  }

  // optional uint32 exposure_value = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->exposure_value(), output);
  }

  // optional uint32 exposure_time = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->exposure_time(), output);
  }

  // optional bool auto_white_balance = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->auto_white_balance(), output);
  }

  // optional bool auto_gain = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->auto_gain(), output);
  }

  // optional uint32 contrast = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->contrast(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_camera.Camera)
}

::google::protobuf::uint8* Camera::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_camera.Camera)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string camera_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_name().data(), static_cast<int>(this->camera_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_camera.Camera.camera_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->camera_name(), target);
  }

  // required string camera_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_type().data(), static_cast<int>(this->camera_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_camera.Camera.camera_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->camera_type(), target);
  }

  // required string camera_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_path().data(), static_cast<int>(this->camera_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_camera.Camera.camera_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->camera_path(), target);
  }

  // required .roborts_camera.CameraMatrix camera_matrix = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_camera_matrix(), deterministic, target);
  }

  // required .roborts_camera.CameraDistortion camera_distortion = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_camera_distortion(), deterministic, target);
  }

  // optional uint32 fps = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fps(), target);
  }

  // optional .roborts_camera.Resolution resolution = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_resolution(), deterministic, target);
  }

  // optional bool auto_exposure = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->auto_exposure(), target);
  }

  // optional uint32 exposure_value = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->exposure_value(), target);
  }

  // optional uint32 exposure_time = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->exposure_time(), target);
  }

  // optional bool auto_white_balance = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->auto_white_balance(), target);
  }

  // optional bool auto_gain = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->auto_gain(), target);
  }

  // optional uint32 contrast = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->contrast(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_camera.Camera)
  return target;
}

size_t Camera::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_camera.Camera)
  size_t total_size = 0;

  if (has_camera_name()) {
    // required string camera_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera_name());
  }

  if (has_camera_type()) {
    // required string camera_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera_type());
  }

  if (has_camera_path()) {
    // required string camera_path = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera_path());
  }

  if (has_camera_matrix()) {
    // required .roborts_camera.CameraMatrix camera_matrix = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_matrix_);
  }

  if (has_camera_distortion()) {
    // required .roborts_camera.CameraDistortion camera_distortion = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_distortion_);
  }

  return total_size;
}
size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_camera.Camera)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string camera_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera_name());

    // required string camera_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera_type());

    // required string camera_path = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera_path());

    // required .roborts_camera.CameraMatrix camera_matrix = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_matrix_);

    // required .roborts_camera.CameraDistortion camera_distortion = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_distortion_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional .roborts_camera.Resolution resolution = 7;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resolution_);
    }

    // optional uint32 fps = 6;
    if (has_fps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fps());
    }

    // optional uint32 exposure_value = 9;
    if (has_exposure_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exposure_value());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 exposure_time = 10;
    if (has_exposure_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exposure_time());
    }

    // optional bool auto_exposure = 8;
    if (has_auto_exposure()) {
      total_size += 1 + 1;
    }

    // optional bool auto_white_balance = 11;
    if (has_auto_white_balance()) {
      total_size += 1 + 1;
    }

    // optional bool auto_gain = 12;
    if (has_auto_gain()) {
      total_size += 1 + 1;
    }

    // optional uint32 contrast = 13;
    if (has_contrast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contrast());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Camera::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_camera.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Camera>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_camera.Camera)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_camera.Camera)
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_camera.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_camera_name();
      camera_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_camera_type();
      camera_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_camera_path();
      camera_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_camera_matrix()->::roborts_camera::CameraMatrix::MergeFrom(from.camera_matrix());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_camera_distortion()->::roborts_camera::CameraDistortion::MergeFrom(from.camera_distortion());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_resolution()->::roborts_camera::Resolution::MergeFrom(from.resolution());
    }
    if (cached_has_bits & 0x00000040u) {
      fps_ = from.fps_;
    }
    if (cached_has_bits & 0x00000080u) {
      exposure_value_ = from.exposure_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      exposure_time_ = from.exposure_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      auto_exposure_ = from.auto_exposure_;
    }
    if (cached_has_bits & 0x00000400u) {
      auto_white_balance_ = from.auto_white_balance_;
    }
    if (cached_has_bits & 0x00000800u) {
      auto_gain_ = from.auto_gain_;
    }
    if (cached_has_bits & 0x00001000u) {
      contrast_ = from.contrast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Camera::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_camera.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_camera.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_resolution()) {
    if (!this->resolution_->IsInitialized()) return false;
  }
  return true;
}

void Camera::Swap(Camera* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Camera::InternalSwap(Camera* other) {
  using std::swap;
  camera_name_.Swap(&other->camera_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  camera_type_.Swap(&other->camera_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  camera_path_.Swap(&other->camera_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(camera_matrix_, other->camera_matrix_);
  swap(camera_distortion_, other->camera_distortion_);
  swap(resolution_, other->resolution_);
  swap(fps_, other->fps_);
  swap(exposure_value_, other->exposure_value_);
  swap(exposure_time_, other->exposure_time_);
  swap(auto_exposure_, other->auto_exposure_);
  swap(auto_white_balance_, other->auto_white_balance_);
  swap(auto_gain_, other->auto_gain_);
  swap(contrast_, other->contrast_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Camera::GetMetadata() const {
  protobuf_camera_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Cameras::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cameras::kCameraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cameras::Cameras()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fparam_2eproto::scc_info_Cameras.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_camera.Cameras)
}
Cameras::Cameras(const Cameras& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      camera_(from.camera_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:roborts_camera.Cameras)
}

void Cameras::SharedCtor() {
}

Cameras::~Cameras() {
  // @@protoc_insertion_point(destructor:roborts_camera.Cameras)
  SharedDtor();
}

void Cameras::SharedDtor() {
}

void Cameras::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Cameras::descriptor() {
  ::protobuf_camera_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cameras& Cameras::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fparam_2eproto::scc_info_Cameras.base);
  return *internal_default_instance();
}


void Cameras::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_camera.Cameras)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Cameras::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_camera.Cameras)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .roborts_camera.Camera camera = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_camera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_camera.Cameras)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_camera.Cameras)
  return false;
#undef DO_
}

void Cameras::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_camera.Cameras)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .roborts_camera.Camera camera = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->camera(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_camera.Cameras)
}

::google::protobuf::uint8* Cameras::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_camera.Cameras)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .roborts_camera.Camera camera = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->camera(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_camera.Cameras)
  return target;
}

size_t Cameras::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_camera.Cameras)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .roborts_camera.Camera camera = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->camera_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->camera(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cameras::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_camera.Cameras)
  GOOGLE_DCHECK_NE(&from, this);
  const Cameras* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cameras>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_camera.Cameras)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_camera.Cameras)
    MergeFrom(*source);
  }
}

void Cameras::MergeFrom(const Cameras& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_camera.Cameras)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camera_.MergeFrom(from.camera_);
}

void Cameras::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_camera.Cameras)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cameras::CopyFrom(const Cameras& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_camera.Cameras)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cameras::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->camera())) return false;
  return true;
}

void Cameras::Swap(Cameras* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cameras::InternalSwap(Cameras* other) {
  using std::swap;
  CastToBase(&camera_)->InternalSwap(CastToBase(&other->camera_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Cameras::GetMetadata() const {
  protobuf_camera_5fparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roborts_camera
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_camera::CameraMatrix* Arena::CreateMaybeMessage< ::roborts_camera::CameraMatrix >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_camera::CameraMatrix >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_camera::CameraDistortion* Arena::CreateMaybeMessage< ::roborts_camera::CameraDistortion >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_camera::CameraDistortion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_camera::Resolution* Arena::CreateMaybeMessage< ::roborts_camera::Resolution >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_camera::Resolution >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_camera::Camera* Arena::CreateMaybeMessage< ::roborts_camera::Camera >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_camera::Camera >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_camera::Cameras* Arena::CreateMaybeMessage< ::roborts_camera::Cameras >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_camera::Cameras >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
