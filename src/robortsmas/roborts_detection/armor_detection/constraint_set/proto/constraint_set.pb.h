// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: constraint_set.proto

#ifndef PROTOBUF_INCLUDED_constraint_5fset_2eproto
#define PROTOBUF_INCLUDED_constraint_5fset_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_constraint_5fset_2eproto 

namespace protobuf_constraint_5fset_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_constraint_5fset_2eproto
namespace roborts_detection {
class ArmorSize;
class ArmorSizeDefaultTypeInternal;
extern ArmorSizeDefaultTypeInternal _ArmorSize_default_instance_;
class ConstraintSetConfig;
class ConstraintSetConfigDefaultTypeInternal;
extern ConstraintSetConfigDefaultTypeInternal _ConstraintSetConfig_default_instance_;
class SignalRecognization;
class SignalRecognizationDefaultTypeInternal;
extern SignalRecognizationDefaultTypeInternal _SignalRecognization_default_instance_;
class Threshold;
class ThresholdDefaultTypeInternal;
extern ThresholdDefaultTypeInternal _Threshold_default_instance_;
}  // namespace roborts_detection
namespace google {
namespace protobuf {
template<> ::roborts_detection::ArmorSize* Arena::CreateMaybeMessage<::roborts_detection::ArmorSize>(Arena*);
template<> ::roborts_detection::ConstraintSetConfig* Arena::CreateMaybeMessage<::roborts_detection::ConstraintSetConfig>(Arena*);
template<> ::roborts_detection::SignalRecognization* Arena::CreateMaybeMessage<::roborts_detection::SignalRecognization>(Arena*);
template<> ::roborts_detection::Threshold* Arena::CreateMaybeMessage<::roborts_detection::Threshold>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace roborts_detection {

enum EnemyColor {
  BLUE = 0,
  RED = 1
};
bool EnemyColor_IsValid(int value);
const EnemyColor EnemyColor_MIN = BLUE;
const EnemyColor EnemyColor_MAX = RED;
const int EnemyColor_ARRAYSIZE = EnemyColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnemyColor_descriptor();
inline const ::std::string& EnemyColor_Name(EnemyColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnemyColor_descriptor(), value);
}
inline bool EnemyColor_Parse(
    const ::std::string& name, EnemyColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnemyColor>(
    EnemyColor_descriptor(), name, value);
}
// ===================================================================

class Threshold : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_detection.Threshold) */ {
 public:
  Threshold();
  virtual ~Threshold();

  Threshold(const Threshold& from);

  inline Threshold& operator=(const Threshold& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Threshold(Threshold&& from) noexcept
    : Threshold() {
    *this = ::std::move(from);
  }

  inline Threshold& operator=(Threshold&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Threshold& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Threshold* internal_default_instance() {
    return reinterpret_cast<const Threshold*>(
               &_Threshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Threshold* other);
  friend void swap(Threshold& a, Threshold& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Threshold* New() const final {
    return CreateMaybeMessage<Threshold>(NULL);
  }

  Threshold* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Threshold>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Threshold& from);
  void MergeFrom(const Threshold& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Threshold* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float light_max_aspect_ratio = 1;
  bool has_light_max_aspect_ratio() const;
  void clear_light_max_aspect_ratio();
  static const int kLightMaxAspectRatioFieldNumber = 1;
  float light_max_aspect_ratio() const;
  void set_light_max_aspect_ratio(float value);

  // required float light_min_area = 2;
  bool has_light_min_area() const;
  void clear_light_min_area();
  static const int kLightMinAreaFieldNumber = 2;
  float light_min_area() const;
  void set_light_min_area(float value);

  // required float light_max_angle = 3;
  bool has_light_max_angle() const;
  void clear_light_max_angle();
  static const int kLightMaxAngleFieldNumber = 3;
  float light_max_angle() const;
  void set_light_max_angle(float value);

  // required float light_max_angle_diff = 4;
  bool has_light_max_angle_diff() const;
  void clear_light_max_angle_diff();
  static const int kLightMaxAngleDiffFieldNumber = 4;
  float light_max_angle_diff() const;
  void set_light_max_angle_diff(float value);

  // required float armor_max_angle = 5;
  bool has_armor_max_angle() const;
  void clear_armor_max_angle();
  static const int kArmorMaxAngleFieldNumber = 5;
  float armor_max_angle() const;
  void set_armor_max_angle(float value);

  // required float armor_min_area = 6;
  bool has_armor_min_area() const;
  void clear_armor_min_area();
  static const int kArmorMinAreaFieldNumber = 6;
  float armor_min_area() const;
  void set_armor_min_area(float value);

  // required float armor_max_aspect_ratio = 7;
  bool has_armor_max_aspect_ratio() const;
  void clear_armor_max_aspect_ratio();
  static const int kArmorMaxAspectRatioFieldNumber = 7;
  float armor_max_aspect_ratio() const;
  void set_armor_max_aspect_ratio(float value);

  // required float armor_max_pixel_val = 8;
  bool has_armor_max_pixel_val() const;
  void clear_armor_max_pixel_val();
  static const int kArmorMaxPixelValFieldNumber = 8;
  float armor_max_pixel_val() const;
  void set_armor_max_pixel_val(float value);

  // required float armor_max_stddev = 9;
  bool has_armor_max_stddev() const;
  void clear_armor_max_stddev();
  static const int kArmorMaxStddevFieldNumber = 9;
  float armor_max_stddev() const;
  void set_armor_max_stddev(float value);

  // required float armor_max_mean = 10;
  bool has_armor_max_mean() const;
  void clear_armor_max_mean();
  static const int kArmorMaxMeanFieldNumber = 10;
  float armor_max_mean() const;
  void set_armor_max_mean(float value);

  // required float color_thread = 11;
  bool has_color_thread() const;
  void clear_color_thread();
  static const int kColorThreadFieldNumber = 11;
  float color_thread() const;
  void set_color_thread(float value);

  // required float blue_thread = 12;
  bool has_blue_thread() const;
  void clear_blue_thread();
  static const int kBlueThreadFieldNumber = 12;
  float blue_thread() const;
  void set_blue_thread(float value);

  // required float red_thread = 13;
  bool has_red_thread() const;
  void clear_red_thread();
  static const int kRedThreadFieldNumber = 13;
  float red_thread() const;
  void set_red_thread(float value);

  // @@protoc_insertion_point(class_scope:roborts_detection.Threshold)
 private:
  void set_has_light_max_aspect_ratio();
  void clear_has_light_max_aspect_ratio();
  void set_has_light_min_area();
  void clear_has_light_min_area();
  void set_has_light_max_angle();
  void clear_has_light_max_angle();
  void set_has_light_max_angle_diff();
  void clear_has_light_max_angle_diff();
  void set_has_armor_max_angle();
  void clear_has_armor_max_angle();
  void set_has_armor_min_area();
  void clear_has_armor_min_area();
  void set_has_armor_max_aspect_ratio();
  void clear_has_armor_max_aspect_ratio();
  void set_has_armor_max_pixel_val();
  void clear_has_armor_max_pixel_val();
  void set_has_armor_max_stddev();
  void clear_has_armor_max_stddev();
  void set_has_armor_max_mean();
  void clear_has_armor_max_mean();
  void set_has_color_thread();
  void clear_has_color_thread();
  void set_has_blue_thread();
  void clear_has_blue_thread();
  void set_has_red_thread();
  void clear_has_red_thread();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float light_max_aspect_ratio_;
  float light_min_area_;
  float light_max_angle_;
  float light_max_angle_diff_;
  float armor_max_angle_;
  float armor_min_area_;
  float armor_max_aspect_ratio_;
  float armor_max_pixel_val_;
  float armor_max_stddev_;
  float armor_max_mean_;
  float color_thread_;
  float blue_thread_;
  float red_thread_;
  friend struct ::protobuf_constraint_5fset_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ArmorSize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_detection.ArmorSize) */ {
 public:
  ArmorSize();
  virtual ~ArmorSize();

  ArmorSize(const ArmorSize& from);

  inline ArmorSize& operator=(const ArmorSize& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArmorSize(ArmorSize&& from) noexcept
    : ArmorSize() {
    *this = ::std::move(from);
  }

  inline ArmorSize& operator=(ArmorSize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArmorSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArmorSize* internal_default_instance() {
    return reinterpret_cast<const ArmorSize*>(
               &_ArmorSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ArmorSize* other);
  friend void swap(ArmorSize& a, ArmorSize& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArmorSize* New() const final {
    return CreateMaybeMessage<ArmorSize>(NULL);
  }

  ArmorSize* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArmorSize>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArmorSize& from);
  void MergeFrom(const ArmorSize& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmorSize* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  float width() const;
  void set_width(float value);

  // required float height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:roborts_detection.ArmorSize)
 private:
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float width_;
  float height_;
  friend struct ::protobuf_constraint_5fset_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignalRecognization : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_detection.SignalRecognization) */ {
 public:
  SignalRecognization();
  virtual ~SignalRecognization();

  SignalRecognization(const SignalRecognization& from);

  inline SignalRecognization& operator=(const SignalRecognization& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalRecognization(SignalRecognization&& from) noexcept
    : SignalRecognization() {
    *this = ::std::move(from);
  }

  inline SignalRecognization& operator=(SignalRecognization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalRecognization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalRecognization* internal_default_instance() {
    return reinterpret_cast<const SignalRecognization*>(
               &_SignalRecognization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SignalRecognization* other);
  friend void swap(SignalRecognization& a, SignalRecognization& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalRecognization* New() const final {
    return CreateMaybeMessage<SignalRecognization>(NULL);
  }

  SignalRecognization* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalRecognization>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalRecognization& from);
  void MergeFrom(const SignalRecognization& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalRecognization* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 max_wait_fps = 1;
  bool has_max_wait_fps() const;
  void clear_max_wait_fps();
  static const int kMaxWaitFpsFieldNumber = 1;
  ::google::protobuf::uint32 max_wait_fps() const;
  void set_max_wait_fps(::google::protobuf::uint32 value);

  // required float min_pulse_angle = 2;
  bool has_min_pulse_angle() const;
  void clear_min_pulse_angle();
  static const int kMinPulseAngleFieldNumber = 2;
  float min_pulse_angle() const;
  void set_min_pulse_angle(float value);

  // required uint32 min_num = 3;
  bool has_min_num() const;
  void clear_min_num();
  static const int kMinNumFieldNumber = 3;
  ::google::protobuf::uint32 min_num() const;
  void set_min_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:roborts_detection.SignalRecognization)
 private:
  void set_has_max_wait_fps();
  void clear_has_max_wait_fps();
  void set_has_min_pulse_angle();
  void clear_has_min_pulse_angle();
  void set_has_min_num();
  void clear_has_min_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 max_wait_fps_;
  float min_pulse_angle_;
  ::google::protobuf::uint32 min_num_;
  friend struct ::protobuf_constraint_5fset_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConstraintSetConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_detection.ConstraintSetConfig) */ {
 public:
  ConstraintSetConfig();
  virtual ~ConstraintSetConfig();

  ConstraintSetConfig(const ConstraintSetConfig& from);

  inline ConstraintSetConfig& operator=(const ConstraintSetConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConstraintSetConfig(ConstraintSetConfig&& from) noexcept
    : ConstraintSetConfig() {
    *this = ::std::move(from);
  }

  inline ConstraintSetConfig& operator=(ConstraintSetConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstraintSetConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConstraintSetConfig* internal_default_instance() {
    return reinterpret_cast<const ConstraintSetConfig*>(
               &_ConstraintSetConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConstraintSetConfig* other);
  friend void swap(ConstraintSetConfig& a, ConstraintSetConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConstraintSetConfig* New() const final {
    return CreateMaybeMessage<ConstraintSetConfig>(NULL);
  }

  ConstraintSetConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConstraintSetConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConstraintSetConfig& from);
  void MergeFrom(const ConstraintSetConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstraintSetConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .roborts_detection.Threshold threshold = 4;
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 4;
  private:
  const ::roborts_detection::Threshold& _internal_threshold() const;
  public:
  const ::roborts_detection::Threshold& threshold() const;
  ::roborts_detection::Threshold* release_threshold();
  ::roborts_detection::Threshold* mutable_threshold();
  void set_allocated_threshold(::roborts_detection::Threshold* threshold);

  // required .roborts_detection.ArmorSize armor_size = 5;
  bool has_armor_size() const;
  void clear_armor_size();
  static const int kArmorSizeFieldNumber = 5;
  private:
  const ::roborts_detection::ArmorSize& _internal_armor_size() const;
  public:
  const ::roborts_detection::ArmorSize& armor_size() const;
  ::roborts_detection::ArmorSize* release_armor_size();
  ::roborts_detection::ArmorSize* mutable_armor_size();
  void set_allocated_armor_size(::roborts_detection::ArmorSize* armor_size);

  // required .roborts_detection.SignalRecognization signal_recognization = 7;
  bool has_signal_recognization() const;
  void clear_signal_recognization();
  static const int kSignalRecognizationFieldNumber = 7;
  private:
  const ::roborts_detection::SignalRecognization& _internal_signal_recognization() const;
  public:
  const ::roborts_detection::SignalRecognization& signal_recognization() const;
  ::roborts_detection::SignalRecognization* release_signal_recognization();
  ::roborts_detection::SignalRecognization* mutable_signal_recognization();
  void set_allocated_signal_recognization(::roborts_detection::SignalRecognization* signal_recognization);

  // required bool enable_debug = 1;
  bool has_enable_debug() const;
  void clear_enable_debug();
  static const int kEnableDebugFieldNumber = 1;
  bool enable_debug() const;
  void set_enable_debug(bool value);

  // required bool enable_neon = 2;
  bool has_enable_neon() const;
  void clear_enable_neon();
  static const int kEnableNeonFieldNumber = 2;
  bool enable_neon() const;
  void set_enable_neon(bool value);

  // required bool using_hsv = 3;
  bool has_using_hsv() const;
  void clear_using_hsv();
  static const int kUsingHsvFieldNumber = 3;
  bool using_hsv() const;
  void set_using_hsv(bool value);

  // required .roborts_detection.EnemyColor enemy_color = 6;
  bool has_enemy_color() const;
  void clear_enemy_color();
  static const int kEnemyColorFieldNumber = 6;
  ::roborts_detection::EnemyColor enemy_color() const;
  void set_enemy_color(::roborts_detection::EnemyColor value);

  // @@protoc_insertion_point(class_scope:roborts_detection.ConstraintSetConfig)
 private:
  void set_has_enable_debug();
  void clear_has_enable_debug();
  void set_has_enable_neon();
  void clear_has_enable_neon();
  void set_has_using_hsv();
  void clear_has_using_hsv();
  void set_has_threshold();
  void clear_has_threshold();
  void set_has_armor_size();
  void clear_has_armor_size();
  void set_has_enemy_color();
  void clear_has_enemy_color();
  void set_has_signal_recognization();
  void clear_has_signal_recognization();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::roborts_detection::Threshold* threshold_;
  ::roborts_detection::ArmorSize* armor_size_;
  ::roborts_detection::SignalRecognization* signal_recognization_;
  bool enable_debug_;
  bool enable_neon_;
  bool using_hsv_;
  int enemy_color_;
  friend struct ::protobuf_constraint_5fset_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Threshold

// required float light_max_aspect_ratio = 1;
inline bool Threshold::has_light_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Threshold::set_has_light_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Threshold::clear_has_light_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Threshold::clear_light_max_aspect_ratio() {
  light_max_aspect_ratio_ = 0;
  clear_has_light_max_aspect_ratio();
}
inline float Threshold::light_max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.light_max_aspect_ratio)
  return light_max_aspect_ratio_;
}
inline void Threshold::set_light_max_aspect_ratio(float value) {
  set_has_light_max_aspect_ratio();
  light_max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.light_max_aspect_ratio)
}

// required float light_min_area = 2;
inline bool Threshold::has_light_min_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Threshold::set_has_light_min_area() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Threshold::clear_has_light_min_area() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Threshold::clear_light_min_area() {
  light_min_area_ = 0;
  clear_has_light_min_area();
}
inline float Threshold::light_min_area() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.light_min_area)
  return light_min_area_;
}
inline void Threshold::set_light_min_area(float value) {
  set_has_light_min_area();
  light_min_area_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.light_min_area)
}

// required float light_max_angle = 3;
inline bool Threshold::has_light_max_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Threshold::set_has_light_max_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Threshold::clear_has_light_max_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Threshold::clear_light_max_angle() {
  light_max_angle_ = 0;
  clear_has_light_max_angle();
}
inline float Threshold::light_max_angle() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.light_max_angle)
  return light_max_angle_;
}
inline void Threshold::set_light_max_angle(float value) {
  set_has_light_max_angle();
  light_max_angle_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.light_max_angle)
}

// required float light_max_angle_diff = 4;
inline bool Threshold::has_light_max_angle_diff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Threshold::set_has_light_max_angle_diff() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Threshold::clear_has_light_max_angle_diff() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Threshold::clear_light_max_angle_diff() {
  light_max_angle_diff_ = 0;
  clear_has_light_max_angle_diff();
}
inline float Threshold::light_max_angle_diff() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.light_max_angle_diff)
  return light_max_angle_diff_;
}
inline void Threshold::set_light_max_angle_diff(float value) {
  set_has_light_max_angle_diff();
  light_max_angle_diff_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.light_max_angle_diff)
}

// required float armor_max_angle = 5;
inline bool Threshold::has_armor_max_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Threshold::set_has_armor_max_angle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Threshold::clear_has_armor_max_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Threshold::clear_armor_max_angle() {
  armor_max_angle_ = 0;
  clear_has_armor_max_angle();
}
inline float Threshold::armor_max_angle() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.armor_max_angle)
  return armor_max_angle_;
}
inline void Threshold::set_armor_max_angle(float value) {
  set_has_armor_max_angle();
  armor_max_angle_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.armor_max_angle)
}

// required float armor_min_area = 6;
inline bool Threshold::has_armor_min_area() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Threshold::set_has_armor_min_area() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Threshold::clear_has_armor_min_area() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Threshold::clear_armor_min_area() {
  armor_min_area_ = 0;
  clear_has_armor_min_area();
}
inline float Threshold::armor_min_area() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.armor_min_area)
  return armor_min_area_;
}
inline void Threshold::set_armor_min_area(float value) {
  set_has_armor_min_area();
  armor_min_area_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.armor_min_area)
}

// required float armor_max_aspect_ratio = 7;
inline bool Threshold::has_armor_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Threshold::set_has_armor_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Threshold::clear_has_armor_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Threshold::clear_armor_max_aspect_ratio() {
  armor_max_aspect_ratio_ = 0;
  clear_has_armor_max_aspect_ratio();
}
inline float Threshold::armor_max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.armor_max_aspect_ratio)
  return armor_max_aspect_ratio_;
}
inline void Threshold::set_armor_max_aspect_ratio(float value) {
  set_has_armor_max_aspect_ratio();
  armor_max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.armor_max_aspect_ratio)
}

// required float armor_max_pixel_val = 8;
inline bool Threshold::has_armor_max_pixel_val() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Threshold::set_has_armor_max_pixel_val() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Threshold::clear_has_armor_max_pixel_val() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Threshold::clear_armor_max_pixel_val() {
  armor_max_pixel_val_ = 0;
  clear_has_armor_max_pixel_val();
}
inline float Threshold::armor_max_pixel_val() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.armor_max_pixel_val)
  return armor_max_pixel_val_;
}
inline void Threshold::set_armor_max_pixel_val(float value) {
  set_has_armor_max_pixel_val();
  armor_max_pixel_val_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.armor_max_pixel_val)
}

// required float armor_max_stddev = 9;
inline bool Threshold::has_armor_max_stddev() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Threshold::set_has_armor_max_stddev() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Threshold::clear_has_armor_max_stddev() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Threshold::clear_armor_max_stddev() {
  armor_max_stddev_ = 0;
  clear_has_armor_max_stddev();
}
inline float Threshold::armor_max_stddev() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.armor_max_stddev)
  return armor_max_stddev_;
}
inline void Threshold::set_armor_max_stddev(float value) {
  set_has_armor_max_stddev();
  armor_max_stddev_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.armor_max_stddev)
}

// required float armor_max_mean = 10;
inline bool Threshold::has_armor_max_mean() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Threshold::set_has_armor_max_mean() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Threshold::clear_has_armor_max_mean() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Threshold::clear_armor_max_mean() {
  armor_max_mean_ = 0;
  clear_has_armor_max_mean();
}
inline float Threshold::armor_max_mean() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.armor_max_mean)
  return armor_max_mean_;
}
inline void Threshold::set_armor_max_mean(float value) {
  set_has_armor_max_mean();
  armor_max_mean_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.armor_max_mean)
}

// required float color_thread = 11;
inline bool Threshold::has_color_thread() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Threshold::set_has_color_thread() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Threshold::clear_has_color_thread() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Threshold::clear_color_thread() {
  color_thread_ = 0;
  clear_has_color_thread();
}
inline float Threshold::color_thread() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.color_thread)
  return color_thread_;
}
inline void Threshold::set_color_thread(float value) {
  set_has_color_thread();
  color_thread_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.color_thread)
}

// required float blue_thread = 12;
inline bool Threshold::has_blue_thread() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Threshold::set_has_blue_thread() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Threshold::clear_has_blue_thread() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Threshold::clear_blue_thread() {
  blue_thread_ = 0;
  clear_has_blue_thread();
}
inline float Threshold::blue_thread() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.blue_thread)
  return blue_thread_;
}
inline void Threshold::set_blue_thread(float value) {
  set_has_blue_thread();
  blue_thread_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.blue_thread)
}

// required float red_thread = 13;
inline bool Threshold::has_red_thread() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Threshold::set_has_red_thread() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Threshold::clear_has_red_thread() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Threshold::clear_red_thread() {
  red_thread_ = 0;
  clear_has_red_thread();
}
inline float Threshold::red_thread() const {
  // @@protoc_insertion_point(field_get:roborts_detection.Threshold.red_thread)
  return red_thread_;
}
inline void Threshold::set_red_thread(float value) {
  set_has_red_thread();
  red_thread_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.Threshold.red_thread)
}

// -------------------------------------------------------------------

// ArmorSize

// required float width = 1;
inline bool ArmorSize::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArmorSize::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArmorSize::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArmorSize::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float ArmorSize::width() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ArmorSize.width)
  return width_;
}
inline void ArmorSize::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.ArmorSize.width)
}

// required float height = 2;
inline bool ArmorSize::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArmorSize::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArmorSize::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArmorSize::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float ArmorSize::height() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ArmorSize.height)
  return height_;
}
inline void ArmorSize::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.ArmorSize.height)
}

// -------------------------------------------------------------------

// SignalRecognization

// required uint32 max_wait_fps = 1;
inline bool SignalRecognization::has_max_wait_fps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalRecognization::set_has_max_wait_fps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalRecognization::clear_has_max_wait_fps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalRecognization::clear_max_wait_fps() {
  max_wait_fps_ = 0u;
  clear_has_max_wait_fps();
}
inline ::google::protobuf::uint32 SignalRecognization::max_wait_fps() const {
  // @@protoc_insertion_point(field_get:roborts_detection.SignalRecognization.max_wait_fps)
  return max_wait_fps_;
}
inline void SignalRecognization::set_max_wait_fps(::google::protobuf::uint32 value) {
  set_has_max_wait_fps();
  max_wait_fps_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.SignalRecognization.max_wait_fps)
}

// required float min_pulse_angle = 2;
inline bool SignalRecognization::has_min_pulse_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalRecognization::set_has_min_pulse_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalRecognization::clear_has_min_pulse_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalRecognization::clear_min_pulse_angle() {
  min_pulse_angle_ = 0;
  clear_has_min_pulse_angle();
}
inline float SignalRecognization::min_pulse_angle() const {
  // @@protoc_insertion_point(field_get:roborts_detection.SignalRecognization.min_pulse_angle)
  return min_pulse_angle_;
}
inline void SignalRecognization::set_min_pulse_angle(float value) {
  set_has_min_pulse_angle();
  min_pulse_angle_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.SignalRecognization.min_pulse_angle)
}

// required uint32 min_num = 3;
inline bool SignalRecognization::has_min_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignalRecognization::set_has_min_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignalRecognization::clear_has_min_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignalRecognization::clear_min_num() {
  min_num_ = 0u;
  clear_has_min_num();
}
inline ::google::protobuf::uint32 SignalRecognization::min_num() const {
  // @@protoc_insertion_point(field_get:roborts_detection.SignalRecognization.min_num)
  return min_num_;
}
inline void SignalRecognization::set_min_num(::google::protobuf::uint32 value) {
  set_has_min_num();
  min_num_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.SignalRecognization.min_num)
}

// -------------------------------------------------------------------

// ConstraintSetConfig

// required bool enable_debug = 1;
inline bool ConstraintSetConfig::has_enable_debug() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConstraintSetConfig::set_has_enable_debug() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConstraintSetConfig::clear_has_enable_debug() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConstraintSetConfig::clear_enable_debug() {
  enable_debug_ = false;
  clear_has_enable_debug();
}
inline bool ConstraintSetConfig::enable_debug() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.enable_debug)
  return enable_debug_;
}
inline void ConstraintSetConfig::set_enable_debug(bool value) {
  set_has_enable_debug();
  enable_debug_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.ConstraintSetConfig.enable_debug)
}

// required bool enable_neon = 2;
inline bool ConstraintSetConfig::has_enable_neon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConstraintSetConfig::set_has_enable_neon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConstraintSetConfig::clear_has_enable_neon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConstraintSetConfig::clear_enable_neon() {
  enable_neon_ = false;
  clear_has_enable_neon();
}
inline bool ConstraintSetConfig::enable_neon() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.enable_neon)
  return enable_neon_;
}
inline void ConstraintSetConfig::set_enable_neon(bool value) {
  set_has_enable_neon();
  enable_neon_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.ConstraintSetConfig.enable_neon)
}

// required bool using_hsv = 3;
inline bool ConstraintSetConfig::has_using_hsv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConstraintSetConfig::set_has_using_hsv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConstraintSetConfig::clear_has_using_hsv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConstraintSetConfig::clear_using_hsv() {
  using_hsv_ = false;
  clear_has_using_hsv();
}
inline bool ConstraintSetConfig::using_hsv() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.using_hsv)
  return using_hsv_;
}
inline void ConstraintSetConfig::set_using_hsv(bool value) {
  set_has_using_hsv();
  using_hsv_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.ConstraintSetConfig.using_hsv)
}

// required .roborts_detection.Threshold threshold = 4;
inline bool ConstraintSetConfig::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConstraintSetConfig::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConstraintSetConfig::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConstraintSetConfig::clear_threshold() {
  if (threshold_ != NULL) threshold_->Clear();
  clear_has_threshold();
}
inline const ::roborts_detection::Threshold& ConstraintSetConfig::_internal_threshold() const {
  return *threshold_;
}
inline const ::roborts_detection::Threshold& ConstraintSetConfig::threshold() const {
  const ::roborts_detection::Threshold* p = threshold_;
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.threshold)
  return p != NULL ? *p : *reinterpret_cast<const ::roborts_detection::Threshold*>(
      &::roborts_detection::_Threshold_default_instance_);
}
inline ::roborts_detection::Threshold* ConstraintSetConfig::release_threshold() {
  // @@protoc_insertion_point(field_release:roborts_detection.ConstraintSetConfig.threshold)
  clear_has_threshold();
  ::roborts_detection::Threshold* temp = threshold_;
  threshold_ = NULL;
  return temp;
}
inline ::roborts_detection::Threshold* ConstraintSetConfig::mutable_threshold() {
  set_has_threshold();
  if (threshold_ == NULL) {
    auto* p = CreateMaybeMessage<::roborts_detection::Threshold>(GetArenaNoVirtual());
    threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:roborts_detection.ConstraintSetConfig.threshold)
  return threshold_;
}
inline void ConstraintSetConfig::set_allocated_threshold(::roborts_detection::Threshold* threshold) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete threshold_;
  }
  if (threshold) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      threshold = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, threshold, submessage_arena);
    }
    set_has_threshold();
  } else {
    clear_has_threshold();
  }
  threshold_ = threshold;
  // @@protoc_insertion_point(field_set_allocated:roborts_detection.ConstraintSetConfig.threshold)
}

// required .roborts_detection.ArmorSize armor_size = 5;
inline bool ConstraintSetConfig::has_armor_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConstraintSetConfig::set_has_armor_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConstraintSetConfig::clear_has_armor_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConstraintSetConfig::clear_armor_size() {
  if (armor_size_ != NULL) armor_size_->Clear();
  clear_has_armor_size();
}
inline const ::roborts_detection::ArmorSize& ConstraintSetConfig::_internal_armor_size() const {
  return *armor_size_;
}
inline const ::roborts_detection::ArmorSize& ConstraintSetConfig::armor_size() const {
  const ::roborts_detection::ArmorSize* p = armor_size_;
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.armor_size)
  return p != NULL ? *p : *reinterpret_cast<const ::roborts_detection::ArmorSize*>(
      &::roborts_detection::_ArmorSize_default_instance_);
}
inline ::roborts_detection::ArmorSize* ConstraintSetConfig::release_armor_size() {
  // @@protoc_insertion_point(field_release:roborts_detection.ConstraintSetConfig.armor_size)
  clear_has_armor_size();
  ::roborts_detection::ArmorSize* temp = armor_size_;
  armor_size_ = NULL;
  return temp;
}
inline ::roborts_detection::ArmorSize* ConstraintSetConfig::mutable_armor_size() {
  set_has_armor_size();
  if (armor_size_ == NULL) {
    auto* p = CreateMaybeMessage<::roborts_detection::ArmorSize>(GetArenaNoVirtual());
    armor_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:roborts_detection.ConstraintSetConfig.armor_size)
  return armor_size_;
}
inline void ConstraintSetConfig::set_allocated_armor_size(::roborts_detection::ArmorSize* armor_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete armor_size_;
  }
  if (armor_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      armor_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, armor_size, submessage_arena);
    }
    set_has_armor_size();
  } else {
    clear_has_armor_size();
  }
  armor_size_ = armor_size;
  // @@protoc_insertion_point(field_set_allocated:roborts_detection.ConstraintSetConfig.armor_size)
}

// required .roborts_detection.EnemyColor enemy_color = 6;
inline bool ConstraintSetConfig::has_enemy_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConstraintSetConfig::set_has_enemy_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConstraintSetConfig::clear_has_enemy_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConstraintSetConfig::clear_enemy_color() {
  enemy_color_ = 0;
  clear_has_enemy_color();
}
inline ::roborts_detection::EnemyColor ConstraintSetConfig::enemy_color() const {
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.enemy_color)
  return static_cast< ::roborts_detection::EnemyColor >(enemy_color_);
}
inline void ConstraintSetConfig::set_enemy_color(::roborts_detection::EnemyColor value) {
  assert(::roborts_detection::EnemyColor_IsValid(value));
  set_has_enemy_color();
  enemy_color_ = value;
  // @@protoc_insertion_point(field_set:roborts_detection.ConstraintSetConfig.enemy_color)
}

// required .roborts_detection.SignalRecognization signal_recognization = 7;
inline bool ConstraintSetConfig::has_signal_recognization() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConstraintSetConfig::set_has_signal_recognization() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConstraintSetConfig::clear_has_signal_recognization() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConstraintSetConfig::clear_signal_recognization() {
  if (signal_recognization_ != NULL) signal_recognization_->Clear();
  clear_has_signal_recognization();
}
inline const ::roborts_detection::SignalRecognization& ConstraintSetConfig::_internal_signal_recognization() const {
  return *signal_recognization_;
}
inline const ::roborts_detection::SignalRecognization& ConstraintSetConfig::signal_recognization() const {
  const ::roborts_detection::SignalRecognization* p = signal_recognization_;
  // @@protoc_insertion_point(field_get:roborts_detection.ConstraintSetConfig.signal_recognization)
  return p != NULL ? *p : *reinterpret_cast<const ::roborts_detection::SignalRecognization*>(
      &::roborts_detection::_SignalRecognization_default_instance_);
}
inline ::roborts_detection::SignalRecognization* ConstraintSetConfig::release_signal_recognization() {
  // @@protoc_insertion_point(field_release:roborts_detection.ConstraintSetConfig.signal_recognization)
  clear_has_signal_recognization();
  ::roborts_detection::SignalRecognization* temp = signal_recognization_;
  signal_recognization_ = NULL;
  return temp;
}
inline ::roborts_detection::SignalRecognization* ConstraintSetConfig::mutable_signal_recognization() {
  set_has_signal_recognization();
  if (signal_recognization_ == NULL) {
    auto* p = CreateMaybeMessage<::roborts_detection::SignalRecognization>(GetArenaNoVirtual());
    signal_recognization_ = p;
  }
  // @@protoc_insertion_point(field_mutable:roborts_detection.ConstraintSetConfig.signal_recognization)
  return signal_recognization_;
}
inline void ConstraintSetConfig::set_allocated_signal_recognization(::roborts_detection::SignalRecognization* signal_recognization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signal_recognization_;
  }
  if (signal_recognization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signal_recognization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signal_recognization, submessage_arena);
    }
    set_has_signal_recognization();
  } else {
    clear_has_signal_recognization();
  }
  signal_recognization_ = signal_recognization;
  // @@protoc_insertion_point(field_set_allocated:roborts_detection.ConstraintSetConfig.signal_recognization)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_detection

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::roborts_detection::EnemyColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::roborts_detection::EnemyColor>() {
  return ::roborts_detection::EnemyColor_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_constraint_5fset_2eproto
