// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: constraint_set.proto

#include "constraint_set.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_constraint_5fset_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_constraint_5fset_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ArmorSize;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_constraint_5fset_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SignalRecognization;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_constraint_5fset_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Threshold;
}  // namespace protobuf_constraint_5fset_2eproto
namespace roborts_detection {
class ThresholdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Threshold>
      _instance;
} _Threshold_default_instance_;
class ArmorSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArmorSize>
      _instance;
} _ArmorSize_default_instance_;
class SignalRecognizationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalRecognization>
      _instance;
} _SignalRecognization_default_instance_;
class ConstraintSetConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConstraintSetConfig>
      _instance;
} _ConstraintSetConfig_default_instance_;
}  // namespace roborts_detection
namespace protobuf_constraint_5fset_2eproto {
static void InitDefaultsThreshold() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_detection::_Threshold_default_instance_;
    new (ptr) ::roborts_detection::Threshold();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_detection::Threshold::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Threshold =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsThreshold}, {}};

static void InitDefaultsArmorSize() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_detection::_ArmorSize_default_instance_;
    new (ptr) ::roborts_detection::ArmorSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_detection::ArmorSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ArmorSize =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsArmorSize}, {}};

static void InitDefaultsSignalRecognization() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_detection::_SignalRecognization_default_instance_;
    new (ptr) ::roborts_detection::SignalRecognization();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_detection::SignalRecognization::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignalRecognization =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignalRecognization}, {}};

static void InitDefaultsConstraintSetConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_detection::_ConstraintSetConfig_default_instance_;
    new (ptr) ::roborts_detection::ConstraintSetConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_detection::ConstraintSetConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ConstraintSetConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsConstraintSetConfig}, {
      &protobuf_constraint_5fset_2eproto::scc_info_Threshold.base,
      &protobuf_constraint_5fset_2eproto::scc_info_ArmorSize.base,
      &protobuf_constraint_5fset_2eproto::scc_info_SignalRecognization.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Threshold.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArmorSize.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalRecognization.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConstraintSetConfig.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, light_max_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, light_min_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, light_max_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, light_max_angle_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, armor_max_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, armor_min_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, armor_max_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, armor_max_pixel_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, armor_max_stddev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, armor_max_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, color_thread_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, blue_thread_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::Threshold, red_thread_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ArmorSize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ArmorSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ArmorSize, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ArmorSize, height_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::SignalRecognization, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::SignalRecognization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::SignalRecognization, max_wait_fps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::SignalRecognization, min_pulse_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::SignalRecognization, min_num_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ConstraintSetConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ConstraintSetConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ConstraintSetConfig, enable_debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ConstraintSetConfig, enable_neon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ConstraintSetConfig, using_hsv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ConstraintSetConfig, threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ConstraintSetConfig, armor_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ConstraintSetConfig, enemy_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ConstraintSetConfig, signal_recognization_),
  3,
  4,
  5,
  0,
  1,
  6,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::roborts_detection::Threshold)},
  { 31, 38, sizeof(::roborts_detection::ArmorSize)},
  { 40, 48, sizeof(::roborts_detection::SignalRecognization)},
  { 51, 63, sizeof(::roborts_detection::ConstraintSetConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_detection::_Threshold_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_detection::_ArmorSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_detection::_SignalRecognization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_detection::_ConstraintSetConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "constraint_set.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024constraint_set.proto\022\021roborts_detectio"
      "n\"\331\002\n\tThreshold\022\036\n\026light_max_aspect_rati"
      "o\030\001 \002(\002\022\026\n\016light_min_area\030\002 \002(\002\022\027\n\017light"
      "_max_angle\030\003 \002(\002\022\034\n\024light_max_angle_diff"
      "\030\004 \002(\002\022\027\n\017armor_max_angle\030\005 \002(\002\022\026\n\016armor"
      "_min_area\030\006 \002(\002\022\036\n\026armor_max_aspect_rati"
      "o\030\007 \002(\002\022\033\n\023armor_max_pixel_val\030\010 \002(\002\022\030\n\020"
      "armor_max_stddev\030\t \002(\002\022\026\n\016armor_max_mean"
      "\030\n \002(\002\022\024\n\014color_thread\030\013 \002(\002\022\023\n\013blue_thr"
      "ead\030\014 \002(\002\022\022\n\nred_thread\030\r \002(\002\"*\n\tArmorSi"
      "ze\022\r\n\005width\030\001 \002(\002\022\016\n\006height\030\002 \002(\002\"U\n\023Sig"
      "nalRecognization\022\024\n\014max_wait_fps\030\001 \002(\r\022\027"
      "\n\017min_pulse_angle\030\002 \002(\002\022\017\n\007min_num\030\003 \002(\r"
      "\"\260\002\n\023ConstraintSetConfig\022\024\n\014enable_debug"
      "\030\001 \002(\010\022\023\n\013enable_neon\030\002 \002(\010\022\021\n\tusing_hsv"
      "\030\003 \002(\010\022/\n\tthreshold\030\004 \002(\0132\034.roborts_dete"
      "ction.Threshold\0220\n\narmor_size\030\005 \002(\0132\034.ro"
      "borts_detection.ArmorSize\0222\n\013enemy_color"
      "\030\006 \002(\0162\035.roborts_detection.EnemyColor\022D\n"
      "\024signal_recognization\030\007 \002(\0132&.roborts_de"
      "tection.SignalRecognization*\037\n\nEnemyColo"
      "r\022\010\n\004BLUE\020\000\022\007\n\003RED\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 860);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "constraint_set.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_constraint_5fset_2eproto
namespace roborts_detection {
const ::google::protobuf::EnumDescriptor* EnemyColor_descriptor() {
  protobuf_constraint_5fset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_constraint_5fset_2eproto::file_level_enum_descriptors[0];
}
bool EnemyColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Threshold::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Threshold::kLightMaxAspectRatioFieldNumber;
const int Threshold::kLightMinAreaFieldNumber;
const int Threshold::kLightMaxAngleFieldNumber;
const int Threshold::kLightMaxAngleDiffFieldNumber;
const int Threshold::kArmorMaxAngleFieldNumber;
const int Threshold::kArmorMinAreaFieldNumber;
const int Threshold::kArmorMaxAspectRatioFieldNumber;
const int Threshold::kArmorMaxPixelValFieldNumber;
const int Threshold::kArmorMaxStddevFieldNumber;
const int Threshold::kArmorMaxMeanFieldNumber;
const int Threshold::kColorThreadFieldNumber;
const int Threshold::kBlueThreadFieldNumber;
const int Threshold::kRedThreadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Threshold::Threshold()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_constraint_5fset_2eproto::scc_info_Threshold.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_detection.Threshold)
}
Threshold::Threshold(const Threshold& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&light_max_aspect_ratio_, &from.light_max_aspect_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&red_thread_) -
    reinterpret_cast<char*>(&light_max_aspect_ratio_)) + sizeof(red_thread_));
  // @@protoc_insertion_point(copy_constructor:roborts_detection.Threshold)
}

void Threshold::SharedCtor() {
  ::memset(&light_max_aspect_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&red_thread_) -
      reinterpret_cast<char*>(&light_max_aspect_ratio_)) + sizeof(red_thread_));
}

Threshold::~Threshold() {
  // @@protoc_insertion_point(destructor:roborts_detection.Threshold)
  SharedDtor();
}

void Threshold::SharedDtor() {
}

void Threshold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Threshold::descriptor() {
  ::protobuf_constraint_5fset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_constraint_5fset_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Threshold& Threshold::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_constraint_5fset_2eproto::scc_info_Threshold.base);
  return *internal_default_instance();
}


void Threshold::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_detection.Threshold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&light_max_aspect_ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&armor_max_pixel_val_) -
        reinterpret_cast<char*>(&light_max_aspect_ratio_)) + sizeof(armor_max_pixel_val_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&armor_max_stddev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&red_thread_) -
        reinterpret_cast<char*>(&armor_max_stddev_)) + sizeof(red_thread_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Threshold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_detection.Threshold)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float light_max_aspect_ratio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_light_max_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_max_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float light_min_area = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_light_min_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_min_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float light_max_angle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_light_max_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_max_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float light_max_angle_diff = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_light_max_angle_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_max_angle_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float armor_max_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_armor_max_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_max_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float armor_min_area = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_armor_min_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_min_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float armor_max_aspect_ratio = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_armor_max_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_max_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float armor_max_pixel_val = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_armor_max_pixel_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_max_pixel_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float armor_max_stddev = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_armor_max_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_max_stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float armor_max_mean = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_armor_max_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_max_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float color_thread = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_color_thread();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_thread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float blue_thread = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_blue_thread();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue_thread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float red_thread = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_red_thread();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &red_thread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_detection.Threshold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_detection.Threshold)
  return false;
#undef DO_
}

void Threshold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_detection.Threshold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float light_max_aspect_ratio = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->light_max_aspect_ratio(), output);
  }

  // required float light_min_area = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->light_min_area(), output);
  }

  // required float light_max_angle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->light_max_angle(), output);
  }

  // required float light_max_angle_diff = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->light_max_angle_diff(), output);
  }

  // required float armor_max_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->armor_max_angle(), output);
  }

  // required float armor_min_area = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->armor_min_area(), output);
  }

  // required float armor_max_aspect_ratio = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->armor_max_aspect_ratio(), output);
  }

  // required float armor_max_pixel_val = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->armor_max_pixel_val(), output);
  }

  // required float armor_max_stddev = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->armor_max_stddev(), output);
  }

  // required float armor_max_mean = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->armor_max_mean(), output);
  }

  // required float color_thread = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->color_thread(), output);
  }

  // required float blue_thread = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->blue_thread(), output);
  }

  // required float red_thread = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->red_thread(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_detection.Threshold)
}

::google::protobuf::uint8* Threshold::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_detection.Threshold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float light_max_aspect_ratio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->light_max_aspect_ratio(), target);
  }

  // required float light_min_area = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->light_min_area(), target);
  }

  // required float light_max_angle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->light_max_angle(), target);
  }

  // required float light_max_angle_diff = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->light_max_angle_diff(), target);
  }

  // required float armor_max_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->armor_max_angle(), target);
  }

  // required float armor_min_area = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->armor_min_area(), target);
  }

  // required float armor_max_aspect_ratio = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->armor_max_aspect_ratio(), target);
  }

  // required float armor_max_pixel_val = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->armor_max_pixel_val(), target);
  }

  // required float armor_max_stddev = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->armor_max_stddev(), target);
  }

  // required float armor_max_mean = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->armor_max_mean(), target);
  }

  // required float color_thread = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->color_thread(), target);
  }

  // required float blue_thread = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->blue_thread(), target);
  }

  // required float red_thread = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->red_thread(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_detection.Threshold)
  return target;
}

size_t Threshold::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_detection.Threshold)
  size_t total_size = 0;

  if (has_light_max_aspect_ratio()) {
    // required float light_max_aspect_ratio = 1;
    total_size += 1 + 4;
  }

  if (has_light_min_area()) {
    // required float light_min_area = 2;
    total_size += 1 + 4;
  }

  if (has_light_max_angle()) {
    // required float light_max_angle = 3;
    total_size += 1 + 4;
  }

  if (has_light_max_angle_diff()) {
    // required float light_max_angle_diff = 4;
    total_size += 1 + 4;
  }

  if (has_armor_max_angle()) {
    // required float armor_max_angle = 5;
    total_size += 1 + 4;
  }

  if (has_armor_min_area()) {
    // required float armor_min_area = 6;
    total_size += 1 + 4;
  }

  if (has_armor_max_aspect_ratio()) {
    // required float armor_max_aspect_ratio = 7;
    total_size += 1 + 4;
  }

  if (has_armor_max_pixel_val()) {
    // required float armor_max_pixel_val = 8;
    total_size += 1 + 4;
  }

  if (has_armor_max_stddev()) {
    // required float armor_max_stddev = 9;
    total_size += 1 + 4;
  }

  if (has_armor_max_mean()) {
    // required float armor_max_mean = 10;
    total_size += 1 + 4;
  }

  if (has_color_thread()) {
    // required float color_thread = 11;
    total_size += 1 + 4;
  }

  if (has_blue_thread()) {
    // required float blue_thread = 12;
    total_size += 1 + 4;
  }

  if (has_red_thread()) {
    // required float red_thread = 13;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Threshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_detection.Threshold)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required float light_max_aspect_ratio = 1;
    total_size += 1 + 4;

    // required float light_min_area = 2;
    total_size += 1 + 4;

    // required float light_max_angle = 3;
    total_size += 1 + 4;

    // required float light_max_angle_diff = 4;
    total_size += 1 + 4;

    // required float armor_max_angle = 5;
    total_size += 1 + 4;

    // required float armor_min_area = 6;
    total_size += 1 + 4;

    // required float armor_max_aspect_ratio = 7;
    total_size += 1 + 4;

    // required float armor_max_pixel_val = 8;
    total_size += 1 + 4;

    // required float armor_max_stddev = 9;
    total_size += 1 + 4;

    // required float armor_max_mean = 10;
    total_size += 1 + 4;

    // required float color_thread = 11;
    total_size += 1 + 4;

    // required float blue_thread = 12;
    total_size += 1 + 4;

    // required float red_thread = 13;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Threshold::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_detection.Threshold)
  GOOGLE_DCHECK_NE(&from, this);
  const Threshold* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Threshold>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_detection.Threshold)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_detection.Threshold)
    MergeFrom(*source);
  }
}

void Threshold::MergeFrom(const Threshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_detection.Threshold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      light_max_aspect_ratio_ = from.light_max_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      light_min_area_ = from.light_min_area_;
    }
    if (cached_has_bits & 0x00000004u) {
      light_max_angle_ = from.light_max_angle_;
    }
    if (cached_has_bits & 0x00000008u) {
      light_max_angle_diff_ = from.light_max_angle_diff_;
    }
    if (cached_has_bits & 0x00000010u) {
      armor_max_angle_ = from.armor_max_angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      armor_min_area_ = from.armor_min_area_;
    }
    if (cached_has_bits & 0x00000040u) {
      armor_max_aspect_ratio_ = from.armor_max_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000080u) {
      armor_max_pixel_val_ = from.armor_max_pixel_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      armor_max_stddev_ = from.armor_max_stddev_;
    }
    if (cached_has_bits & 0x00000200u) {
      armor_max_mean_ = from.armor_max_mean_;
    }
    if (cached_has_bits & 0x00000400u) {
      color_thread_ = from.color_thread_;
    }
    if (cached_has_bits & 0x00000800u) {
      blue_thread_ = from.blue_thread_;
    }
    if (cached_has_bits & 0x00001000u) {
      red_thread_ = from.red_thread_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Threshold::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_detection.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Threshold::CopyFrom(const Threshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_detection.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Threshold::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  return true;
}

void Threshold::Swap(Threshold* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Threshold::InternalSwap(Threshold* other) {
  using std::swap;
  swap(light_max_aspect_ratio_, other->light_max_aspect_ratio_);
  swap(light_min_area_, other->light_min_area_);
  swap(light_max_angle_, other->light_max_angle_);
  swap(light_max_angle_diff_, other->light_max_angle_diff_);
  swap(armor_max_angle_, other->armor_max_angle_);
  swap(armor_min_area_, other->armor_min_area_);
  swap(armor_max_aspect_ratio_, other->armor_max_aspect_ratio_);
  swap(armor_max_pixel_val_, other->armor_max_pixel_val_);
  swap(armor_max_stddev_, other->armor_max_stddev_);
  swap(armor_max_mean_, other->armor_max_mean_);
  swap(color_thread_, other->color_thread_);
  swap(blue_thread_, other->blue_thread_);
  swap(red_thread_, other->red_thread_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Threshold::GetMetadata() const {
  protobuf_constraint_5fset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_constraint_5fset_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ArmorSize::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArmorSize::kWidthFieldNumber;
const int ArmorSize::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArmorSize::ArmorSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_constraint_5fset_2eproto::scc_info_ArmorSize.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_detection.ArmorSize)
}
ArmorSize::ArmorSize(const ArmorSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:roborts_detection.ArmorSize)
}

void ArmorSize::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

ArmorSize::~ArmorSize() {
  // @@protoc_insertion_point(destructor:roborts_detection.ArmorSize)
  SharedDtor();
}

void ArmorSize::SharedDtor() {
}

void ArmorSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ArmorSize::descriptor() {
  ::protobuf_constraint_5fset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_constraint_5fset_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArmorSize& ArmorSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_constraint_5fset_2eproto::scc_info_ArmorSize.base);
  return *internal_default_instance();
}


void ArmorSize::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_detection.ArmorSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ArmorSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_detection.ArmorSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_detection.ArmorSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_detection.ArmorSize)
  return false;
#undef DO_
}

void ArmorSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_detection.ArmorSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // required float height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_detection.ArmorSize)
}

::google::protobuf::uint8* ArmorSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_detection.ArmorSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->width(), target);
  }

  // required float height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_detection.ArmorSize)
  return target;
}

size_t ArmorSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_detection.ArmorSize)
  size_t total_size = 0;

  if (has_width()) {
    // required float width = 1;
    total_size += 1 + 4;
  }

  if (has_height()) {
    // required float height = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ArmorSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_detection.ArmorSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float width = 1;
    total_size += 1 + 4;

    // required float height = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArmorSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_detection.ArmorSize)
  GOOGLE_DCHECK_NE(&from, this);
  const ArmorSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArmorSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_detection.ArmorSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_detection.ArmorSize)
    MergeFrom(*source);
  }
}

void ArmorSize::MergeFrom(const ArmorSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_detection.ArmorSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArmorSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_detection.ArmorSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmorSize::CopyFrom(const ArmorSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_detection.ArmorSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmorSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ArmorSize::Swap(ArmorSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArmorSize::InternalSwap(ArmorSize* other) {
  using std::swap;
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ArmorSize::GetMetadata() const {
  protobuf_constraint_5fset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_constraint_5fset_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignalRecognization::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalRecognization::kMaxWaitFpsFieldNumber;
const int SignalRecognization::kMinPulseAngleFieldNumber;
const int SignalRecognization::kMinNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalRecognization::SignalRecognization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_constraint_5fset_2eproto::scc_info_SignalRecognization.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_detection.SignalRecognization)
}
SignalRecognization::SignalRecognization(const SignalRecognization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_wait_fps_, &from.max_wait_fps_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_num_) -
    reinterpret_cast<char*>(&max_wait_fps_)) + sizeof(min_num_));
  // @@protoc_insertion_point(copy_constructor:roborts_detection.SignalRecognization)
}

void SignalRecognization::SharedCtor() {
  ::memset(&max_wait_fps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_num_) -
      reinterpret_cast<char*>(&max_wait_fps_)) + sizeof(min_num_));
}

SignalRecognization::~SignalRecognization() {
  // @@protoc_insertion_point(destructor:roborts_detection.SignalRecognization)
  SharedDtor();
}

void SignalRecognization::SharedDtor() {
}

void SignalRecognization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SignalRecognization::descriptor() {
  ::protobuf_constraint_5fset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_constraint_5fset_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignalRecognization& SignalRecognization::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_constraint_5fset_2eproto::scc_info_SignalRecognization.base);
  return *internal_default_instance();
}


void SignalRecognization::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_detection.SignalRecognization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&max_wait_fps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_num_) -
        reinterpret_cast<char*>(&max_wait_fps_)) + sizeof(min_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignalRecognization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_detection.SignalRecognization)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 max_wait_fps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_max_wait_fps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_wait_fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float min_pulse_angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_min_pulse_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_pulse_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 min_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_min_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_detection.SignalRecognization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_detection.SignalRecognization)
  return false;
#undef DO_
}

void SignalRecognization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_detection.SignalRecognization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 max_wait_fps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_wait_fps(), output);
  }

  // required float min_pulse_angle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_pulse_angle(), output);
  }

  // required uint32 min_num = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_detection.SignalRecognization)
}

::google::protobuf::uint8* SignalRecognization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_detection.SignalRecognization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 max_wait_fps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_wait_fps(), target);
  }

  // required float min_pulse_angle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_pulse_angle(), target);
  }

  // required uint32 min_num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_detection.SignalRecognization)
  return target;
}

size_t SignalRecognization::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_detection.SignalRecognization)
  size_t total_size = 0;

  if (has_max_wait_fps()) {
    // required uint32 max_wait_fps = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_wait_fps());
  }

  if (has_min_pulse_angle()) {
    // required float min_pulse_angle = 2;
    total_size += 1 + 4;
  }

  if (has_min_num()) {
    // required uint32 min_num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min_num());
  }

  return total_size;
}
size_t SignalRecognization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_detection.SignalRecognization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 max_wait_fps = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_wait_fps());

    // required float min_pulse_angle = 2;
    total_size += 1 + 4;

    // required uint32 min_num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalRecognization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_detection.SignalRecognization)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalRecognization* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalRecognization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_detection.SignalRecognization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_detection.SignalRecognization)
    MergeFrom(*source);
  }
}

void SignalRecognization::MergeFrom(const SignalRecognization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_detection.SignalRecognization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      max_wait_fps_ = from.max_wait_fps_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_pulse_angle_ = from.min_pulse_angle_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_num_ = from.min_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignalRecognization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_detection.SignalRecognization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalRecognization::CopyFrom(const SignalRecognization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_detection.SignalRecognization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalRecognization::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SignalRecognization::Swap(SignalRecognization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalRecognization::InternalSwap(SignalRecognization* other) {
  using std::swap;
  swap(max_wait_fps_, other->max_wait_fps_);
  swap(min_pulse_angle_, other->min_pulse_angle_);
  swap(min_num_, other->min_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignalRecognization::GetMetadata() const {
  protobuf_constraint_5fset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_constraint_5fset_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConstraintSetConfig::InitAsDefaultInstance() {
  ::roborts_detection::_ConstraintSetConfig_default_instance_._instance.get_mutable()->threshold_ = const_cast< ::roborts_detection::Threshold*>(
      ::roborts_detection::Threshold::internal_default_instance());
  ::roborts_detection::_ConstraintSetConfig_default_instance_._instance.get_mutable()->armor_size_ = const_cast< ::roborts_detection::ArmorSize*>(
      ::roborts_detection::ArmorSize::internal_default_instance());
  ::roborts_detection::_ConstraintSetConfig_default_instance_._instance.get_mutable()->signal_recognization_ = const_cast< ::roborts_detection::SignalRecognization*>(
      ::roborts_detection::SignalRecognization::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstraintSetConfig::kEnableDebugFieldNumber;
const int ConstraintSetConfig::kEnableNeonFieldNumber;
const int ConstraintSetConfig::kUsingHsvFieldNumber;
const int ConstraintSetConfig::kThresholdFieldNumber;
const int ConstraintSetConfig::kArmorSizeFieldNumber;
const int ConstraintSetConfig::kEnemyColorFieldNumber;
const int ConstraintSetConfig::kSignalRecognizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstraintSetConfig::ConstraintSetConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_constraint_5fset_2eproto::scc_info_ConstraintSetConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_detection.ConstraintSetConfig)
}
ConstraintSetConfig::ConstraintSetConfig(const ConstraintSetConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_threshold()) {
    threshold_ = new ::roborts_detection::Threshold(*from.threshold_);
  } else {
    threshold_ = NULL;
  }
  if (from.has_armor_size()) {
    armor_size_ = new ::roborts_detection::ArmorSize(*from.armor_size_);
  } else {
    armor_size_ = NULL;
  }
  if (from.has_signal_recognization()) {
    signal_recognization_ = new ::roborts_detection::SignalRecognization(*from.signal_recognization_);
  } else {
    signal_recognization_ = NULL;
  }
  ::memcpy(&enable_debug_, &from.enable_debug_,
    static_cast<size_t>(reinterpret_cast<char*>(&enemy_color_) -
    reinterpret_cast<char*>(&enable_debug_)) + sizeof(enemy_color_));
  // @@protoc_insertion_point(copy_constructor:roborts_detection.ConstraintSetConfig)
}

void ConstraintSetConfig::SharedCtor() {
  ::memset(&threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enemy_color_) -
      reinterpret_cast<char*>(&threshold_)) + sizeof(enemy_color_));
}

ConstraintSetConfig::~ConstraintSetConfig() {
  // @@protoc_insertion_point(destructor:roborts_detection.ConstraintSetConfig)
  SharedDtor();
}

void ConstraintSetConfig::SharedDtor() {
  if (this != internal_default_instance()) delete threshold_;
  if (this != internal_default_instance()) delete armor_size_;
  if (this != internal_default_instance()) delete signal_recognization_;
}

void ConstraintSetConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConstraintSetConfig::descriptor() {
  ::protobuf_constraint_5fset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_constraint_5fset_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConstraintSetConfig& ConstraintSetConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_constraint_5fset_2eproto::scc_info_ConstraintSetConfig.base);
  return *internal_default_instance();
}


void ConstraintSetConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_detection.ConstraintSetConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(threshold_ != NULL);
      threshold_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(armor_size_ != NULL);
      armor_size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(signal_recognization_ != NULL);
      signal_recognization_->Clear();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&enable_debug_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enemy_color_) -
        reinterpret_cast<char*>(&enable_debug_)) + sizeof(enemy_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConstraintSetConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_detection.ConstraintSetConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enable_debug = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enable_debug();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_debug_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool enable_neon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_enable_neon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_neon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool using_hsv = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_using_hsv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &using_hsv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .roborts_detection.Threshold threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .roborts_detection.ArmorSize armor_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_armor_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .roborts_detection.EnemyColor enemy_color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::roborts_detection::EnemyColor_IsValid(value)) {
            set_enemy_color(static_cast< ::roborts_detection::EnemyColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .roborts_detection.SignalRecognization signal_recognization = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signal_recognization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_detection.ConstraintSetConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_detection.ConstraintSetConfig)
  return false;
#undef DO_
}

void ConstraintSetConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_detection.ConstraintSetConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_debug = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_debug(), output);
  }

  // required bool enable_neon = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_neon(), output);
  }

  // required bool using_hsv = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->using_hsv(), output);
  }

  // required .roborts_detection.Threshold threshold = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_threshold(), output);
  }

  // required .roborts_detection.ArmorSize armor_size = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_armor_size(), output);
  }

  // required .roborts_detection.EnemyColor enemy_color = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->enemy_color(), output);
  }

  // required .roborts_detection.SignalRecognization signal_recognization = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_signal_recognization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_detection.ConstraintSetConfig)
}

::google::protobuf::uint8* ConstraintSetConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_detection.ConstraintSetConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_debug = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_debug(), target);
  }

  // required bool enable_neon = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_neon(), target);
  }

  // required bool using_hsv = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->using_hsv(), target);
  }

  // required .roborts_detection.Threshold threshold = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_threshold(), deterministic, target);
  }

  // required .roborts_detection.ArmorSize armor_size = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_armor_size(), deterministic, target);
  }

  // required .roborts_detection.EnemyColor enemy_color = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->enemy_color(), target);
  }

  // required .roborts_detection.SignalRecognization signal_recognization = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_signal_recognization(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_detection.ConstraintSetConfig)
  return target;
}

size_t ConstraintSetConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_detection.ConstraintSetConfig)
  size_t total_size = 0;

  if (has_threshold()) {
    // required .roborts_detection.Threshold threshold = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *threshold_);
  }

  if (has_armor_size()) {
    // required .roborts_detection.ArmorSize armor_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *armor_size_);
  }

  if (has_signal_recognization()) {
    // required .roborts_detection.SignalRecognization signal_recognization = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signal_recognization_);
  }

  if (has_enable_debug()) {
    // required bool enable_debug = 1;
    total_size += 1 + 1;
  }

  if (has_enable_neon()) {
    // required bool enable_neon = 2;
    total_size += 1 + 1;
  }

  if (has_using_hsv()) {
    // required bool using_hsv = 3;
    total_size += 1 + 1;
  }

  if (has_enemy_color()) {
    // required .roborts_detection.EnemyColor enemy_color = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enemy_color());
  }

  return total_size;
}
size_t ConstraintSetConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_detection.ConstraintSetConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .roborts_detection.Threshold threshold = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *threshold_);

    // required .roborts_detection.ArmorSize armor_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *armor_size_);

    // required .roborts_detection.SignalRecognization signal_recognization = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signal_recognization_);

    // required bool enable_debug = 1;
    total_size += 1 + 1;

    // required bool enable_neon = 2;
    total_size += 1 + 1;

    // required bool using_hsv = 3;
    total_size += 1 + 1;

    // required .roborts_detection.EnemyColor enemy_color = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enemy_color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstraintSetConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_detection.ConstraintSetConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstraintSetConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstraintSetConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_detection.ConstraintSetConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_detection.ConstraintSetConfig)
    MergeFrom(*source);
  }
}

void ConstraintSetConfig::MergeFrom(const ConstraintSetConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_detection.ConstraintSetConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_threshold()->::roborts_detection::Threshold::MergeFrom(from.threshold());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_armor_size()->::roborts_detection::ArmorSize::MergeFrom(from.armor_size());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_signal_recognization()->::roborts_detection::SignalRecognization::MergeFrom(from.signal_recognization());
    }
    if (cached_has_bits & 0x00000008u) {
      enable_debug_ = from.enable_debug_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_neon_ = from.enable_neon_;
    }
    if (cached_has_bits & 0x00000020u) {
      using_hsv_ = from.using_hsv_;
    }
    if (cached_has_bits & 0x00000040u) {
      enemy_color_ = from.enemy_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConstraintSetConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_detection.ConstraintSetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstraintSetConfig::CopyFrom(const ConstraintSetConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_detection.ConstraintSetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintSetConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_threshold()) {
    if (!this->threshold_->IsInitialized()) return false;
  }
  if (has_armor_size()) {
    if (!this->armor_size_->IsInitialized()) return false;
  }
  if (has_signal_recognization()) {
    if (!this->signal_recognization_->IsInitialized()) return false;
  }
  return true;
}

void ConstraintSetConfig::Swap(ConstraintSetConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstraintSetConfig::InternalSwap(ConstraintSetConfig* other) {
  using std::swap;
  swap(threshold_, other->threshold_);
  swap(armor_size_, other->armor_size_);
  swap(signal_recognization_, other->signal_recognization_);
  swap(enable_debug_, other->enable_debug_);
  swap(enable_neon_, other->enable_neon_);
  swap(using_hsv_, other->using_hsv_);
  swap(enemy_color_, other->enemy_color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConstraintSetConfig::GetMetadata() const {
  protobuf_constraint_5fset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_constraint_5fset_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roborts_detection
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_detection::Threshold* Arena::CreateMaybeMessage< ::roborts_detection::Threshold >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_detection::Threshold >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_detection::ArmorSize* Arena::CreateMaybeMessage< ::roborts_detection::ArmorSize >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_detection::ArmorSize >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_detection::SignalRecognization* Arena::CreateMaybeMessage< ::roborts_detection::SignalRecognization >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_detection::SignalRecognization >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_detection::ConstraintSetConfig* Arena::CreateMaybeMessage< ::roborts_detection::ConstraintSetConfig >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_detection::ConstraintSetConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
