// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: armor_detection.proto

#include "armor_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_armor_5fdetection_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_armor_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CameraGimbalTransform;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_armor_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProjectileModelInfo;
}  // namespace protobuf_armor_5fdetection_2eproto
namespace roborts_detection {
class CameraGimbalTransformDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraGimbalTransform>
      _instance;
} _CameraGimbalTransform_default_instance_;
class ProjectileModelInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjectileModelInfo>
      _instance;
} _ProjectileModelInfo_default_instance_;
class ArmorDetectionAlgorithmsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArmorDetectionAlgorithms>
      _instance;
} _ArmorDetectionAlgorithms_default_instance_;
}  // namespace roborts_detection
namespace protobuf_armor_5fdetection_2eproto {
static void InitDefaultsCameraGimbalTransform() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_detection::_CameraGimbalTransform_default_instance_;
    new (ptr) ::roborts_detection::CameraGimbalTransform();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_detection::CameraGimbalTransform::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CameraGimbalTransform =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraGimbalTransform}, {}};

static void InitDefaultsProjectileModelInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_detection::_ProjectileModelInfo_default_instance_;
    new (ptr) ::roborts_detection::ProjectileModelInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_detection::ProjectileModelInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProjectileModelInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProjectileModelInfo}, {}};

static void InitDefaultsArmorDetectionAlgorithms() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_detection::_ArmorDetectionAlgorithms_default_instance_;
    new (ptr) ::roborts_detection::ArmorDetectionAlgorithms();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_detection::ArmorDetectionAlgorithms::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ArmorDetectionAlgorithms =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsArmorDetectionAlgorithms}, {
      &protobuf_armor_5fdetection_2eproto::scc_info_CameraGimbalTransform.base,
      &protobuf_armor_5fdetection_2eproto::scc_info_ProjectileModelInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CameraGimbalTransform.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProjectileModelInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArmorDetectionAlgorithms.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::CameraGimbalTransform, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::CameraGimbalTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::CameraGimbalTransform, offset_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::CameraGimbalTransform, offset_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::CameraGimbalTransform, offset_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::CameraGimbalTransform, offset_pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::CameraGimbalTransform, offset_yaw_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ProjectileModelInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ProjectileModelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ProjectileModelInfo, init_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ProjectileModelInfo, init_k_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ArmorDetectionAlgorithms, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ArmorDetectionAlgorithms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ArmorDetectionAlgorithms, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ArmorDetectionAlgorithms, selected_algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ArmorDetectionAlgorithms, undetected_armor_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ArmorDetectionAlgorithms, camera_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ArmorDetectionAlgorithms, camera_gimbal_transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_detection::ArmorDetectionAlgorithms, projectile_model_info_),
  ~0u,
  0,
  4,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::roborts_detection::CameraGimbalTransform)},
  { 15, 22, sizeof(::roborts_detection::ProjectileModelInfo)},
  { 24, 35, sizeof(::roborts_detection::ArmorDetectionAlgorithms)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_detection::_CameraGimbalTransform_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_detection::_ProjectileModelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_detection::_ArmorDetectionAlgorithms_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "armor_detection.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025armor_detection.proto\022\021roborts_detecti"
      "on\"w\n\025CameraGimbalTransform\022\020\n\010offset_x\030"
      "\001 \002(\002\022\020\n\010offset_y\030\002 \002(\002\022\020\n\010offset_z\030\003 \002("
      "\002\022\024\n\014offset_pitch\030\004 \002(\002\022\022\n\noffset_yaw\030\005 "
      "\002(\002\"5\n\023ProjectileModelInfo\022\016\n\006init_v\030\001 \001"
      "(\002\022\016\n\006init_k\030\002 \001(\002\"\213\002\n\030ArmorDetectionAlg"
      "orithms\022\014\n\004name\030\001 \003(\t\022\032\n\022selected_algori"
      "thm\030\002 \001(\t\022\036\n\026undetected_armor_delay\030\003 \001("
      "\r\022\023\n\013camera_name\030\004 \001(\t\022I\n\027camera_gimbal_"
      "transform\030\005 \002(\0132(.roborts_detection.Came"
      "raGimbalTransform\022E\n\025projectile_model_in"
      "fo\030\006 \001(\0132&.roborts_detection.ProjectileM"
      "odelInfo"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 488);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "armor_detection.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_armor_5fdetection_2eproto
namespace roborts_detection {

// ===================================================================

void CameraGimbalTransform::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraGimbalTransform::kOffsetXFieldNumber;
const int CameraGimbalTransform::kOffsetYFieldNumber;
const int CameraGimbalTransform::kOffsetZFieldNumber;
const int CameraGimbalTransform::kOffsetPitchFieldNumber;
const int CameraGimbalTransform::kOffsetYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraGimbalTransform::CameraGimbalTransform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_armor_5fdetection_2eproto::scc_info_CameraGimbalTransform.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_detection.CameraGimbalTransform)
}
CameraGimbalTransform::CameraGimbalTransform(const CameraGimbalTransform& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_x_, &from.offset_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_yaw_) -
    reinterpret_cast<char*>(&offset_x_)) + sizeof(offset_yaw_));
  // @@protoc_insertion_point(copy_constructor:roborts_detection.CameraGimbalTransform)
}

void CameraGimbalTransform::SharedCtor() {
  ::memset(&offset_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_yaw_) -
      reinterpret_cast<char*>(&offset_x_)) + sizeof(offset_yaw_));
}

CameraGimbalTransform::~CameraGimbalTransform() {
  // @@protoc_insertion_point(destructor:roborts_detection.CameraGimbalTransform)
  SharedDtor();
}

void CameraGimbalTransform::SharedDtor() {
}

void CameraGimbalTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraGimbalTransform::descriptor() {
  ::protobuf_armor_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_armor_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraGimbalTransform& CameraGimbalTransform::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_armor_5fdetection_2eproto::scc_info_CameraGimbalTransform.base);
  return *internal_default_instance();
}


void CameraGimbalTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_detection.CameraGimbalTransform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&offset_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_yaw_) -
        reinterpret_cast<char*>(&offset_x_)) + sizeof(offset_yaw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraGimbalTransform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_detection.CameraGimbalTransform)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float offset_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_offset_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float offset_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_offset_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float offset_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_offset_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float offset_pitch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_offset_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float offset_yaw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_offset_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_detection.CameraGimbalTransform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_detection.CameraGimbalTransform)
  return false;
#undef DO_
}

void CameraGimbalTransform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_detection.CameraGimbalTransform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float offset_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->offset_x(), output);
  }

  // required float offset_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->offset_y(), output);
  }

  // required float offset_z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->offset_z(), output);
  }

  // required float offset_pitch = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->offset_pitch(), output);
  }

  // required float offset_yaw = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->offset_yaw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_detection.CameraGimbalTransform)
}

::google::protobuf::uint8* CameraGimbalTransform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_detection.CameraGimbalTransform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float offset_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->offset_x(), target);
  }

  // required float offset_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->offset_y(), target);
  }

  // required float offset_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->offset_z(), target);
  }

  // required float offset_pitch = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->offset_pitch(), target);
  }

  // required float offset_yaw = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->offset_yaw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_detection.CameraGimbalTransform)
  return target;
}

size_t CameraGimbalTransform::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_detection.CameraGimbalTransform)
  size_t total_size = 0;

  if (has_offset_x()) {
    // required float offset_x = 1;
    total_size += 1 + 4;
  }

  if (has_offset_y()) {
    // required float offset_y = 2;
    total_size += 1 + 4;
  }

  if (has_offset_z()) {
    // required float offset_z = 3;
    total_size += 1 + 4;
  }

  if (has_offset_pitch()) {
    // required float offset_pitch = 4;
    total_size += 1 + 4;
  }

  if (has_offset_yaw()) {
    // required float offset_yaw = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CameraGimbalTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_detection.CameraGimbalTransform)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required float offset_x = 1;
    total_size += 1 + 4;

    // required float offset_y = 2;
    total_size += 1 + 4;

    // required float offset_z = 3;
    total_size += 1 + 4;

    // required float offset_pitch = 4;
    total_size += 1 + 4;

    // required float offset_yaw = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraGimbalTransform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_detection.CameraGimbalTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraGimbalTransform* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraGimbalTransform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_detection.CameraGimbalTransform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_detection.CameraGimbalTransform)
    MergeFrom(*source);
  }
}

void CameraGimbalTransform::MergeFrom(const CameraGimbalTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_detection.CameraGimbalTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      offset_x_ = from.offset_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      offset_y_ = from.offset_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_z_ = from.offset_z_;
    }
    if (cached_has_bits & 0x00000008u) {
      offset_pitch_ = from.offset_pitch_;
    }
    if (cached_has_bits & 0x00000010u) {
      offset_yaw_ = from.offset_yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraGimbalTransform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_detection.CameraGimbalTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraGimbalTransform::CopyFrom(const CameraGimbalTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_detection.CameraGimbalTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraGimbalTransform::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void CameraGimbalTransform::Swap(CameraGimbalTransform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraGimbalTransform::InternalSwap(CameraGimbalTransform* other) {
  using std::swap;
  swap(offset_x_, other->offset_x_);
  swap(offset_y_, other->offset_y_);
  swap(offset_z_, other->offset_z_);
  swap(offset_pitch_, other->offset_pitch_);
  swap(offset_yaw_, other->offset_yaw_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraGimbalTransform::GetMetadata() const {
  protobuf_armor_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_armor_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProjectileModelInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectileModelInfo::kInitVFieldNumber;
const int ProjectileModelInfo::kInitKFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectileModelInfo::ProjectileModelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_armor_5fdetection_2eproto::scc_info_ProjectileModelInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_detection.ProjectileModelInfo)
}
ProjectileModelInfo::ProjectileModelInfo(const ProjectileModelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&init_v_, &from.init_v_,
    static_cast<size_t>(reinterpret_cast<char*>(&init_k_) -
    reinterpret_cast<char*>(&init_v_)) + sizeof(init_k_));
  // @@protoc_insertion_point(copy_constructor:roborts_detection.ProjectileModelInfo)
}

void ProjectileModelInfo::SharedCtor() {
  ::memset(&init_v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_k_) -
      reinterpret_cast<char*>(&init_v_)) + sizeof(init_k_));
}

ProjectileModelInfo::~ProjectileModelInfo() {
  // @@protoc_insertion_point(destructor:roborts_detection.ProjectileModelInfo)
  SharedDtor();
}

void ProjectileModelInfo::SharedDtor() {
}

void ProjectileModelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProjectileModelInfo::descriptor() {
  ::protobuf_armor_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_armor_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProjectileModelInfo& ProjectileModelInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_armor_5fdetection_2eproto::scc_info_ProjectileModelInfo.base);
  return *internal_default_instance();
}


void ProjectileModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_detection.ProjectileModelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&init_v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&init_k_) -
        reinterpret_cast<char*>(&init_v_)) + sizeof(init_k_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProjectileModelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_detection.ProjectileModelInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float init_v = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_init_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float init_k = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_init_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_detection.ProjectileModelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_detection.ProjectileModelInfo)
  return false;
#undef DO_
}

void ProjectileModelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_detection.ProjectileModelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float init_v = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->init_v(), output);
  }

  // optional float init_k = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->init_k(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_detection.ProjectileModelInfo)
}

::google::protobuf::uint8* ProjectileModelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_detection.ProjectileModelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float init_v = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->init_v(), target);
  }

  // optional float init_k = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->init_k(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_detection.ProjectileModelInfo)
  return target;
}

size_t ProjectileModelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_detection.ProjectileModelInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float init_v = 1;
    if (has_init_v()) {
      total_size += 1 + 4;
    }

    // optional float init_k = 2;
    if (has_init_k()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectileModelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_detection.ProjectileModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectileModelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjectileModelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_detection.ProjectileModelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_detection.ProjectileModelInfo)
    MergeFrom(*source);
  }
}

void ProjectileModelInfo::MergeFrom(const ProjectileModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_detection.ProjectileModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      init_v_ = from.init_v_;
    }
    if (cached_has_bits & 0x00000002u) {
      init_k_ = from.init_k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjectileModelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_detection.ProjectileModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectileModelInfo::CopyFrom(const ProjectileModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_detection.ProjectileModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectileModelInfo::IsInitialized() const {
  return true;
}

void ProjectileModelInfo::Swap(ProjectileModelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectileModelInfo::InternalSwap(ProjectileModelInfo* other) {
  using std::swap;
  swap(init_v_, other->init_v_);
  swap(init_k_, other->init_k_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProjectileModelInfo::GetMetadata() const {
  protobuf_armor_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_armor_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ArmorDetectionAlgorithms::InitAsDefaultInstance() {
  ::roborts_detection::_ArmorDetectionAlgorithms_default_instance_._instance.get_mutable()->camera_gimbal_transform_ = const_cast< ::roborts_detection::CameraGimbalTransform*>(
      ::roborts_detection::CameraGimbalTransform::internal_default_instance());
  ::roborts_detection::_ArmorDetectionAlgorithms_default_instance_._instance.get_mutable()->projectile_model_info_ = const_cast< ::roborts_detection::ProjectileModelInfo*>(
      ::roborts_detection::ProjectileModelInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArmorDetectionAlgorithms::kNameFieldNumber;
const int ArmorDetectionAlgorithms::kSelectedAlgorithmFieldNumber;
const int ArmorDetectionAlgorithms::kUndetectedArmorDelayFieldNumber;
const int ArmorDetectionAlgorithms::kCameraNameFieldNumber;
const int ArmorDetectionAlgorithms::kCameraGimbalTransformFieldNumber;
const int ArmorDetectionAlgorithms::kProjectileModelInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArmorDetectionAlgorithms::ArmorDetectionAlgorithms()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_armor_5fdetection_2eproto::scc_info_ArmorDetectionAlgorithms.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_detection.ArmorDetectionAlgorithms)
}
ArmorDetectionAlgorithms::ArmorDetectionAlgorithms(const ArmorDetectionAlgorithms& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      name_(from.name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  selected_algorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_selected_algorithm()) {
    selected_algorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selected_algorithm_);
  }
  camera_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_camera_name()) {
    camera_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
  }
  if (from.has_camera_gimbal_transform()) {
    camera_gimbal_transform_ = new ::roborts_detection::CameraGimbalTransform(*from.camera_gimbal_transform_);
  } else {
    camera_gimbal_transform_ = NULL;
  }
  if (from.has_projectile_model_info()) {
    projectile_model_info_ = new ::roborts_detection::ProjectileModelInfo(*from.projectile_model_info_);
  } else {
    projectile_model_info_ = NULL;
  }
  undetected_armor_delay_ = from.undetected_armor_delay_;
  // @@protoc_insertion_point(copy_constructor:roborts_detection.ArmorDetectionAlgorithms)
}

void ArmorDetectionAlgorithms::SharedCtor() {
  selected_algorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&camera_gimbal_transform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&undetected_armor_delay_) -
      reinterpret_cast<char*>(&camera_gimbal_transform_)) + sizeof(undetected_armor_delay_));
}

ArmorDetectionAlgorithms::~ArmorDetectionAlgorithms() {
  // @@protoc_insertion_point(destructor:roborts_detection.ArmorDetectionAlgorithms)
  SharedDtor();
}

void ArmorDetectionAlgorithms::SharedDtor() {
  selected_algorithm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete camera_gimbal_transform_;
  if (this != internal_default_instance()) delete projectile_model_info_;
}

void ArmorDetectionAlgorithms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ArmorDetectionAlgorithms::descriptor() {
  ::protobuf_armor_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_armor_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArmorDetectionAlgorithms& ArmorDetectionAlgorithms::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_armor_5fdetection_2eproto::scc_info_ArmorDetectionAlgorithms.base);
  return *internal_default_instance();
}


void ArmorDetectionAlgorithms::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_detection.ArmorDetectionAlgorithms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      selected_algorithm_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      camera_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(camera_gimbal_transform_ != NULL);
      camera_gimbal_transform_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(projectile_model_info_ != NULL);
      projectile_model_info_->Clear();
    }
  }
  undetected_armor_delay_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ArmorDetectionAlgorithms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_detection.ArmorDetectionAlgorithms)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name(this->name_size() - 1).data(),
            static_cast<int>(this->name(this->name_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_detection.ArmorDetectionAlgorithms.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string selected_algorithm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selected_algorithm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->selected_algorithm().data(), static_cast<int>(this->selected_algorithm().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_detection.ArmorDetectionAlgorithms.selected_algorithm");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 undetected_armor_delay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_undetected_armor_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &undetected_armor_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string camera_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_name().data(), static_cast<int>(this->camera_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_detection.ArmorDetectionAlgorithms.camera_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .roborts_detection.CameraGimbalTransform camera_gimbal_transform = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_gimbal_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .roborts_detection.ProjectileModelInfo projectile_model_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_projectile_model_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_detection.ArmorDetectionAlgorithms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_detection.ArmorDetectionAlgorithms)
  return false;
#undef DO_
}

void ArmorDetectionAlgorithms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_detection.ArmorDetectionAlgorithms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name = 1;
  for (int i = 0, n = this->name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), static_cast<int>(this->name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_detection.ArmorDetectionAlgorithms.name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string selected_algorithm = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selected_algorithm().data(), static_cast<int>(this->selected_algorithm().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_detection.ArmorDetectionAlgorithms.selected_algorithm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->selected_algorithm(), output);
  }

  // optional uint32 undetected_armor_delay = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->undetected_armor_delay(), output);
  }

  // optional string camera_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_name().data(), static_cast<int>(this->camera_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_detection.ArmorDetectionAlgorithms.camera_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->camera_name(), output);
  }

  // required .roborts_detection.CameraGimbalTransform camera_gimbal_transform = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_camera_gimbal_transform(), output);
  }

  // optional .roborts_detection.ProjectileModelInfo projectile_model_info = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_projectile_model_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_detection.ArmorDetectionAlgorithms)
}

::google::protobuf::uint8* ArmorDetectionAlgorithms::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_detection.ArmorDetectionAlgorithms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name = 1;
  for (int i = 0, n = this->name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), static_cast<int>(this->name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_detection.ArmorDetectionAlgorithms.name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string selected_algorithm = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selected_algorithm().data(), static_cast<int>(this->selected_algorithm().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_detection.ArmorDetectionAlgorithms.selected_algorithm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->selected_algorithm(), target);
  }

  // optional uint32 undetected_armor_delay = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->undetected_armor_delay(), target);
  }

  // optional string camera_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_name().data(), static_cast<int>(this->camera_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_detection.ArmorDetectionAlgorithms.camera_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->camera_name(), target);
  }

  // required .roborts_detection.CameraGimbalTransform camera_gimbal_transform = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_camera_gimbal_transform(), deterministic, target);
  }

  // optional .roborts_detection.ProjectileModelInfo projectile_model_info = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_projectile_model_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_detection.ArmorDetectionAlgorithms)
  return target;
}

size_t ArmorDetectionAlgorithms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_detection.ArmorDetectionAlgorithms)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .roborts_detection.CameraGimbalTransform camera_gimbal_transform = 5;
  if (has_camera_gimbal_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_gimbal_transform_);
  }
  // repeated string name = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->name_size());
  for (int i = 0, n = this->name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string selected_algorithm = 2;
    if (has_selected_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selected_algorithm());
    }

    // optional string camera_name = 4;
    if (has_camera_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_name());
    }

  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional .roborts_detection.ProjectileModelInfo projectile_model_info = 6;
    if (has_projectile_model_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *projectile_model_info_);
    }

    // optional uint32 undetected_armor_delay = 3;
    if (has_undetected_armor_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->undetected_armor_delay());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArmorDetectionAlgorithms::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_detection.ArmorDetectionAlgorithms)
  GOOGLE_DCHECK_NE(&from, this);
  const ArmorDetectionAlgorithms* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArmorDetectionAlgorithms>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_detection.ArmorDetectionAlgorithms)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_detection.ArmorDetectionAlgorithms)
    MergeFrom(*source);
  }
}

void ArmorDetectionAlgorithms::MergeFrom(const ArmorDetectionAlgorithms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_detection.ArmorDetectionAlgorithms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_.MergeFrom(from.name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_selected_algorithm();
      selected_algorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selected_algorithm_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_camera_name();
      camera_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_camera_gimbal_transform()->::roborts_detection::CameraGimbalTransform::MergeFrom(from.camera_gimbal_transform());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_projectile_model_info()->::roborts_detection::ProjectileModelInfo::MergeFrom(from.projectile_model_info());
    }
    if (cached_has_bits & 0x00000010u) {
      undetected_armor_delay_ = from.undetected_armor_delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArmorDetectionAlgorithms::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_detection.ArmorDetectionAlgorithms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmorDetectionAlgorithms::CopyFrom(const ArmorDetectionAlgorithms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_detection.ArmorDetectionAlgorithms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmorDetectionAlgorithms::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_camera_gimbal_transform()) {
    if (!this->camera_gimbal_transform_->IsInitialized()) return false;
  }
  return true;
}

void ArmorDetectionAlgorithms::Swap(ArmorDetectionAlgorithms* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArmorDetectionAlgorithms::InternalSwap(ArmorDetectionAlgorithms* other) {
  using std::swap;
  name_.InternalSwap(CastToBase(&other->name_));
  selected_algorithm_.Swap(&other->selected_algorithm_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  camera_name_.Swap(&other->camera_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(camera_gimbal_transform_, other->camera_gimbal_transform_);
  swap(projectile_model_info_, other->projectile_model_info_);
  swap(undetected_armor_delay_, other->undetected_armor_delay_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ArmorDetectionAlgorithms::GetMetadata() const {
  protobuf_armor_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_armor_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roborts_detection
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_detection::CameraGimbalTransform* Arena::CreateMaybeMessage< ::roborts_detection::CameraGimbalTransform >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_detection::CameraGimbalTransform >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_detection::ProjectileModelInfo* Arena::CreateMaybeMessage< ::roborts_detection::ProjectileModelInfo >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_detection::ProjectileModelInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_detection::ArmorDetectionAlgorithms* Arena::CreateMaybeMessage< ::roborts_detection::ArmorDetectionAlgorithms >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_detection::ArmorDetectionAlgorithms >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
