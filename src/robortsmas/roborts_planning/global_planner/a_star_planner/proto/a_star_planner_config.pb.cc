// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a_star_planner_config.proto

#include "a_star_planner_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace roborts_global_planner {
class AStarPlannerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AStarPlannerConfig>
      _instance;
} _AStarPlannerConfig_default_instance_;
}  // namespace roborts_global_planner
namespace protobuf_a_5fstar_5fplanner_5fconfig_2eproto {
static void InitDefaultsAStarPlannerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_global_planner::_AStarPlannerConfig_default_instance_;
    new (ptr) ::roborts_global_planner::AStarPlannerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_global_planner::AStarPlannerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AStarPlannerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAStarPlannerConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AStarPlannerConfig.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_global_planner::AStarPlannerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_global_planner::AStarPlannerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_global_planner::AStarPlannerConfig, inaccessible_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_global_planner::AStarPlannerConfig, heuristic_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_global_planner::AStarPlannerConfig, goal_search_tolerance_),
  1,
  2,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::roborts_global_planner::AStarPlannerConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_global_planner::_AStarPlannerConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "a_star_planner_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033a_star_planner_config.proto\022\026roborts_g"
      "lobal_planner\"v\n\022AStarPlannerConfig\022\036\n\021i"
      "naccessible_cost\030\001 \001(\r:\003253\022\033\n\020heuristic"
      "_factor\030\002 \001(\002:\0011\022#\n\025goal_search_toleranc"
      "e\030\003 \001(\002:\0040.25"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "a_star_planner_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_a_5fstar_5fplanner_5fconfig_2eproto
namespace roborts_global_planner {

// ===================================================================

void AStarPlannerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AStarPlannerConfig::kInaccessibleCostFieldNumber;
const int AStarPlannerConfig::kHeuristicFactorFieldNumber;
const int AStarPlannerConfig::kGoalSearchToleranceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AStarPlannerConfig::AStarPlannerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_a_5fstar_5fplanner_5fconfig_2eproto::scc_info_AStarPlannerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_global_planner.AStarPlannerConfig)
}
AStarPlannerConfig::AStarPlannerConfig(const AStarPlannerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&goal_search_tolerance_, &from.goal_search_tolerance_,
    static_cast<size_t>(reinterpret_cast<char*>(&heuristic_factor_) -
    reinterpret_cast<char*>(&goal_search_tolerance_)) + sizeof(heuristic_factor_));
  // @@protoc_insertion_point(copy_constructor:roborts_global_planner.AStarPlannerConfig)
}

void AStarPlannerConfig::SharedCtor() {
  goal_search_tolerance_ = 0.25f;
  inaccessible_cost_ = 253u;
  heuristic_factor_ = 1;
}

AStarPlannerConfig::~AStarPlannerConfig() {
  // @@protoc_insertion_point(destructor:roborts_global_planner.AStarPlannerConfig)
  SharedDtor();
}

void AStarPlannerConfig::SharedDtor() {
}

void AStarPlannerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AStarPlannerConfig::descriptor() {
  ::protobuf_a_5fstar_5fplanner_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_a_5fstar_5fplanner_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AStarPlannerConfig& AStarPlannerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_a_5fstar_5fplanner_5fconfig_2eproto::scc_info_AStarPlannerConfig.base);
  return *internal_default_instance();
}


void AStarPlannerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_global_planner.AStarPlannerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    goal_search_tolerance_ = 0.25f;
    inaccessible_cost_ = 253u;
    heuristic_factor_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AStarPlannerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_global_planner.AStarPlannerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 inaccessible_cost = 1 [default = 253];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_inaccessible_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inaccessible_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heuristic_factor = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_heuristic_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heuristic_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float goal_search_tolerance = 3 [default = 0.25];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_goal_search_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &goal_search_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_global_planner.AStarPlannerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_global_planner.AStarPlannerConfig)
  return false;
#undef DO_
}

void AStarPlannerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_global_planner.AStarPlannerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 inaccessible_cost = 1 [default = 253];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inaccessible_cost(), output);
  }

  // optional float heuristic_factor = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heuristic_factor(), output);
  }

  // optional float goal_search_tolerance = 3 [default = 0.25];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->goal_search_tolerance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_global_planner.AStarPlannerConfig)
}

::google::protobuf::uint8* AStarPlannerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_global_planner.AStarPlannerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 inaccessible_cost = 1 [default = 253];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inaccessible_cost(), target);
  }

  // optional float heuristic_factor = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heuristic_factor(), target);
  }

  // optional float goal_search_tolerance = 3 [default = 0.25];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->goal_search_tolerance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_global_planner.AStarPlannerConfig)
  return target;
}

size_t AStarPlannerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_global_planner.AStarPlannerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float goal_search_tolerance = 3 [default = 0.25];
    if (has_goal_search_tolerance()) {
      total_size += 1 + 4;
    }

    // optional uint32 inaccessible_cost = 1 [default = 253];
    if (has_inaccessible_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inaccessible_cost());
    }

    // optional float heuristic_factor = 2 [default = 1];
    if (has_heuristic_factor()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AStarPlannerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_global_planner.AStarPlannerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AStarPlannerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AStarPlannerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_global_planner.AStarPlannerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_global_planner.AStarPlannerConfig)
    MergeFrom(*source);
  }
}

void AStarPlannerConfig::MergeFrom(const AStarPlannerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_global_planner.AStarPlannerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      goal_search_tolerance_ = from.goal_search_tolerance_;
    }
    if (cached_has_bits & 0x00000002u) {
      inaccessible_cost_ = from.inaccessible_cost_;
    }
    if (cached_has_bits & 0x00000004u) {
      heuristic_factor_ = from.heuristic_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AStarPlannerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_global_planner.AStarPlannerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AStarPlannerConfig::CopyFrom(const AStarPlannerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_global_planner.AStarPlannerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AStarPlannerConfig::IsInitialized() const {
  return true;
}

void AStarPlannerConfig::Swap(AStarPlannerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AStarPlannerConfig::InternalSwap(AStarPlannerConfig* other) {
  using std::swap;
  swap(goal_search_tolerance_, other->goal_search_tolerance_);
  swap(inaccessible_cost_, other->inaccessible_cost_);
  swap(heuristic_factor_, other->heuristic_factor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AStarPlannerConfig::GetMetadata() const {
  protobuf_a_5fstar_5fplanner_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_a_5fstar_5fplanner_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roborts_global_planner
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_global_planner::AStarPlannerConfig* Arena::CreateMaybeMessage< ::roborts_global_planner::AStarPlannerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_global_planner::AStarPlannerConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
