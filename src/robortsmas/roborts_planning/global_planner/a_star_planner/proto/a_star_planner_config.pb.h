// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a_star_planner_config.proto

#ifndef PROTOBUF_INCLUDED_a_5fstar_5fplanner_5fconfig_2eproto
#define PROTOBUF_INCLUDED_a_5fstar_5fplanner_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_a_5fstar_5fplanner_5fconfig_2eproto 

namespace protobuf_a_5fstar_5fplanner_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_a_5fstar_5fplanner_5fconfig_2eproto
namespace roborts_global_planner {
class AStarPlannerConfig;
class AStarPlannerConfigDefaultTypeInternal;
extern AStarPlannerConfigDefaultTypeInternal _AStarPlannerConfig_default_instance_;
}  // namespace roborts_global_planner
namespace google {
namespace protobuf {
template<> ::roborts_global_planner::AStarPlannerConfig* Arena::CreateMaybeMessage<::roborts_global_planner::AStarPlannerConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace roborts_global_planner {

// ===================================================================

class AStarPlannerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_global_planner.AStarPlannerConfig) */ {
 public:
  AStarPlannerConfig();
  virtual ~AStarPlannerConfig();

  AStarPlannerConfig(const AStarPlannerConfig& from);

  inline AStarPlannerConfig& operator=(const AStarPlannerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AStarPlannerConfig(AStarPlannerConfig&& from) noexcept
    : AStarPlannerConfig() {
    *this = ::std::move(from);
  }

  inline AStarPlannerConfig& operator=(AStarPlannerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AStarPlannerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AStarPlannerConfig* internal_default_instance() {
    return reinterpret_cast<const AStarPlannerConfig*>(
               &_AStarPlannerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AStarPlannerConfig* other);
  friend void swap(AStarPlannerConfig& a, AStarPlannerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AStarPlannerConfig* New() const final {
    return CreateMaybeMessage<AStarPlannerConfig>(NULL);
  }

  AStarPlannerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AStarPlannerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AStarPlannerConfig& from);
  void MergeFrom(const AStarPlannerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AStarPlannerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float goal_search_tolerance = 3 [default = 0.25];
  bool has_goal_search_tolerance() const;
  void clear_goal_search_tolerance();
  static const int kGoalSearchToleranceFieldNumber = 3;
  float goal_search_tolerance() const;
  void set_goal_search_tolerance(float value);

  // optional uint32 inaccessible_cost = 1 [default = 253];
  bool has_inaccessible_cost() const;
  void clear_inaccessible_cost();
  static const int kInaccessibleCostFieldNumber = 1;
  ::google::protobuf::uint32 inaccessible_cost() const;
  void set_inaccessible_cost(::google::protobuf::uint32 value);

  // optional float heuristic_factor = 2 [default = 1];
  bool has_heuristic_factor() const;
  void clear_heuristic_factor();
  static const int kHeuristicFactorFieldNumber = 2;
  float heuristic_factor() const;
  void set_heuristic_factor(float value);

  // @@protoc_insertion_point(class_scope:roborts_global_planner.AStarPlannerConfig)
 private:
  void set_has_inaccessible_cost();
  void clear_has_inaccessible_cost();
  void set_has_heuristic_factor();
  void clear_has_heuristic_factor();
  void set_has_goal_search_tolerance();
  void clear_has_goal_search_tolerance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float goal_search_tolerance_;
  ::google::protobuf::uint32 inaccessible_cost_;
  float heuristic_factor_;
  friend struct ::protobuf_a_5fstar_5fplanner_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AStarPlannerConfig

// optional uint32 inaccessible_cost = 1 [default = 253];
inline bool AStarPlannerConfig::has_inaccessible_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AStarPlannerConfig::set_has_inaccessible_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AStarPlannerConfig::clear_has_inaccessible_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AStarPlannerConfig::clear_inaccessible_cost() {
  inaccessible_cost_ = 253u;
  clear_has_inaccessible_cost();
}
inline ::google::protobuf::uint32 AStarPlannerConfig::inaccessible_cost() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.AStarPlannerConfig.inaccessible_cost)
  return inaccessible_cost_;
}
inline void AStarPlannerConfig::set_inaccessible_cost(::google::protobuf::uint32 value) {
  set_has_inaccessible_cost();
  inaccessible_cost_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.AStarPlannerConfig.inaccessible_cost)
}

// optional float heuristic_factor = 2 [default = 1];
inline bool AStarPlannerConfig::has_heuristic_factor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AStarPlannerConfig::set_has_heuristic_factor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AStarPlannerConfig::clear_has_heuristic_factor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AStarPlannerConfig::clear_heuristic_factor() {
  heuristic_factor_ = 1;
  clear_has_heuristic_factor();
}
inline float AStarPlannerConfig::heuristic_factor() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.AStarPlannerConfig.heuristic_factor)
  return heuristic_factor_;
}
inline void AStarPlannerConfig::set_heuristic_factor(float value) {
  set_has_heuristic_factor();
  heuristic_factor_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.AStarPlannerConfig.heuristic_factor)
}

// optional float goal_search_tolerance = 3 [default = 0.25];
inline bool AStarPlannerConfig::has_goal_search_tolerance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AStarPlannerConfig::set_has_goal_search_tolerance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AStarPlannerConfig::clear_has_goal_search_tolerance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AStarPlannerConfig::clear_goal_search_tolerance() {
  goal_search_tolerance_ = 0.25f;
  clear_has_goal_search_tolerance();
}
inline float AStarPlannerConfig::goal_search_tolerance() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.AStarPlannerConfig.goal_search_tolerance)
  return goal_search_tolerance_;
}
inline void AStarPlannerConfig::set_goal_search_tolerance(float value) {
  set_has_goal_search_tolerance();
  goal_search_tolerance_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.AStarPlannerConfig.goal_search_tolerance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_global_planner

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_a_5fstar_5fplanner_5fconfig_2eproto
