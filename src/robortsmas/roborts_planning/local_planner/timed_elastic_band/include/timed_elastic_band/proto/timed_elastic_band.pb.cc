// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timed_elastic_band.proto

#include "timed_elastic_band.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_timed_5felastic_5fband_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_timed_5felastic_5fband_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FrameID;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_timed_5felastic_5fband_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GoalTolerance;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_timed_5felastic_5fband_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HomotopyClassPlanner;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_timed_5felastic_5fband_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Obstacles;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_timed_5felastic_5fband_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Optimization;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_timed_5felastic_5fband_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point2D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_timed_5felastic_5fband_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Recovery;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_timed_5felastic_5fband_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Robot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_timed_5felastic_5fband_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Trajectory;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_timed_5felastic_5fband_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FootprintModel;
}  // namespace protobuf_timed_5felastic_5fband_2eproto
namespace roborts_local_planner {
class FrameIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameID>
      _instance;
} _FrameID_default_instance_;
class Point2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point2D>
      _instance;
} _Point2D_default_instance_;
class TrajectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trajectory>
      _instance;
} _Trajectory_default_instance_;
class FootprintModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FootprintModel>
      _instance;
} _FootprintModel_default_instance_;
class RobotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Robot>
      _instance;
} _Robot_default_instance_;
class GoalToleranceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GoalTolerance>
      _instance;
} _GoalTolerance_default_instance_;
class ObstaclesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Obstacles>
      _instance;
} _Obstacles_default_instance_;
class OptimizationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Optimization>
      _instance;
} _Optimization_default_instance_;
class HomotopyClassPlannerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HomotopyClassPlanner>
      _instance;
} _HomotopyClassPlanner_default_instance_;
class RecoveryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Recovery>
      _instance;
} _Recovery_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config>
      _instance;
} _Config_default_instance_;
}  // namespace roborts_local_planner
namespace protobuf_timed_5felastic_5fband_2eproto {
static void InitDefaultsFrameID() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_local_planner::_FrameID_default_instance_;
    new (ptr) ::roborts_local_planner::FrameID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_local_planner::FrameID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FrameID =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFrameID}, {}};

static void InitDefaultsPoint2D() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_local_planner::_Point2D_default_instance_;
    new (ptr) ::roborts_local_planner::Point2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_local_planner::Point2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point2D =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint2D}, {}};

static void InitDefaultsTrajectory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_local_planner::_Trajectory_default_instance_;
    new (ptr) ::roborts_local_planner::Trajectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_local_planner::Trajectory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Trajectory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrajectory}, {}};

static void InitDefaultsFootprintModel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_local_planner::_FootprintModel_default_instance_;
    new (ptr) ::roborts_local_planner::FootprintModel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_local_planner::FootprintModel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FootprintModel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFootprintModel}, {
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Point2D.base,}};

static void InitDefaultsRobot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_local_planner::_Robot_default_instance_;
    new (ptr) ::roborts_local_planner::Robot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_local_planner::Robot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Robot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRobot}, {}};

static void InitDefaultsGoalTolerance() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_local_planner::_GoalTolerance_default_instance_;
    new (ptr) ::roborts_local_planner::GoalTolerance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_local_planner::GoalTolerance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GoalTolerance =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGoalTolerance}, {}};

static void InitDefaultsObstacles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_local_planner::_Obstacles_default_instance_;
    new (ptr) ::roborts_local_planner::Obstacles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_local_planner::Obstacles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Obstacles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstacles}, {}};

static void InitDefaultsOptimization() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_local_planner::_Optimization_default_instance_;
    new (ptr) ::roborts_local_planner::Optimization();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_local_planner::Optimization::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Optimization =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptimization}, {}};

static void InitDefaultsHomotopyClassPlanner() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_local_planner::_HomotopyClassPlanner_default_instance_;
    new (ptr) ::roborts_local_planner::HomotopyClassPlanner();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_local_planner::HomotopyClassPlanner::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HomotopyClassPlanner =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHomotopyClassPlanner}, {}};

static void InitDefaultsRecovery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_local_planner::_Recovery_default_instance_;
    new (ptr) ::roborts_local_planner::Recovery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_local_planner::Recovery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Recovery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRecovery}, {}};

static void InitDefaultsConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_local_planner::_Config_default_instance_;
    new (ptr) ::roborts_local_planner::Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_local_planner::Config::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_Config =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsConfig}, {
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_FrameID.base,
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Trajectory.base,
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Robot.base,
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_GoalTolerance.base,
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Obstacles.base,
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Optimization.base,
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_HomotopyClassPlanner.base,
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_FootprintModel.base,
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Recovery.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FrameID.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point2D.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Trajectory.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FootprintModel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Robot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GoalTolerance.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Obstacles.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Optimization.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HomotopyClassPlanner.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Recovery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Config.base);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FrameID, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FrameID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FrameID, odom_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FrameID, map_frame_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Point2D, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Point2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Point2D, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Point2D, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, teb_autosize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, dt_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, dt_hysteresis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, global_plan_overwrite_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, allow_init_with_backwards_motion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, global_plan_viapoint_sep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, via_points_ordered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, max_global_plan_lookahead_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, exact_arc_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, force_reinit_new_goal_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, feasibility_check_no_poses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, publish_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, min_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Trajectory, max_samples_),
  2,
  0,
  1,
  3,
  4,
  6,
  5,
  7,
  12,
  8,
  9,
  13,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FootprintModel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FootprintModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FootprintModel, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FootprintModel, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FootprintModel, front_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FootprintModel, front_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FootprintModel, rear_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FootprintModel, rear_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::FootprintModel, robot_vertices_),
  5,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Robot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Robot, max_vel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Robot, max_vel_x_backwards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Robot, max_vel_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Robot, max_vel_theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Robot, acc_lim_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Robot, acc_lim_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Robot, acc_lim_theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Robot, min_turning_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Robot, wheelbase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Robot, cmd_angle_instead_rotvel_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::GoalTolerance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::GoalTolerance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::GoalTolerance, xy_goal_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::GoalTolerance, yaw_goal_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::GoalTolerance, free_goal_vel_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, min_obstacle_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, inflation_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, include_costmap_obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, costmap_obstacles_behind_robot_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, obstacle_poses_affected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, legacy_obstacle_association_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, obstacle_association_cutoff_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, obstacle_association_force_inclusion_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, costmap_converter_plugin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, costmap_converter_spin_thread_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Obstacles, costmap_converter_rate_),
  1,
  2,
  5,
  3,
  4,
  6,
  8,
  9,
  0,
  7,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, no_inner_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, no_outer_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, optimization_activate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, optimization_verbose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, penalty_epsilon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_max_vel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_max_vel_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_max_vel_theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_acc_lim_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_acc_lim_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_acc_lim_thet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_kinematics_nh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_kinematics_forward_drive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_kinematics_turning_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_optimaltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_inflation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_dynamic_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_viapoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_adapt_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_prefer_rotdir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Optimization, weight_acc_lim_theta_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, enable_homotopy_class_planning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, enable_multithreading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, simple_exploration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, max_number_classes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, selection_obst_cost_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, selection_prefer_initial_plan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, selection_viapoint_cost_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, selection_cost_hysteresis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, selection_alternative_time_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, roadmap_graph_no_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, roadmap_graph_area_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, roadmap_graph_area_length_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, h_signature_prescaler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, h_signature_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, obstacle_keypoint_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, obstacle_heading_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, viapoints_all_candidates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::HomotopyClassPlanner, visualize_hc_graph_),
  0,
  1,
  2,
  4,
  5,
  6,
  7,
  8,
  3,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Recovery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Recovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Recovery, shrink_horizon_min_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Recovery, oscillation_recovery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Recovery, shrink_horizon_backup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Recovery, oscillation_v_eps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Recovery, oscillation_omega_eps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Recovery, oscillation_recovery_min_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Recovery, oscillation_filter_duration_),
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Config, opt_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Config, trajectory_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Config, kinematics_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Config, tolerance_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Config, obstacles_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Config, optimize_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Config, hcp_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Config, robot_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_local_planner::Config, recovery_info_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::roborts_local_planner::FrameID)},
  { 9, 16, sizeof(::roborts_local_planner::Point2D)},
  { 18, 37, sizeof(::roborts_local_planner::Trajectory)},
  { 51, 63, sizeof(::roborts_local_planner::FootprintModel)},
  { 70, 85, sizeof(::roborts_local_planner::Robot)},
  { 95, 103, sizeof(::roborts_local_planner::GoalTolerance)},
  { 106, 122, sizeof(::roborts_local_planner::Obstacles)},
  { 133, 160, sizeof(::roborts_local_planner::Optimization)},
  { 182, 205, sizeof(::roborts_local_planner::HomotopyClassPlanner)},
  { 223, 235, sizeof(::roborts_local_planner::Recovery)},
  { 242, 256, sizeof(::roborts_local_planner::Config)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_local_planner::_FrameID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_local_planner::_Point2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_local_planner::_Trajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_local_planner::_FootprintModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_local_planner::_Robot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_local_planner::_GoalTolerance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_local_planner::_Obstacles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_local_planner::_Optimization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_local_planner::_HomotopyClassPlanner_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_local_planner::_Recovery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_local_planner::_Config_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "timed_elastic_band.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030timed_elastic_band.proto\022\025roborts_loca"
      "l_planner\"0\n\007FrameID\022\022\n\nodom_frame\030\001 \001(\t"
      "\022\021\n\tmap_frame\030\002 \001(\t\"\037\n\007Point2D\022\t\n\001x\030\001 \001("
      "\002\022\t\n\001y\030\002 \001(\002\"\252\003\n\nTrajectory\022\024\n\014teb_autos"
      "ize\030\001 \001(\010\022\016\n\006dt_ref\030\002 \001(\002\022\025\n\rdt_hysteres"
      "is\030\003 \001(\002\022)\n!global_plan_overwrite_orient"
      "ation\030\004 \001(\010\022(\n allow_init_with_backwards"
      "_motion\030\005 \001(\010\022 \n\030global_plan_viapoint_se"
      "p\030\006 \001(\002\022\032\n\022via_points_ordered\030\007 \001(\010\022&\n\036m"
      "ax_global_plan_lookahead_dist\030\010 \001(\002\022\030\n\020e"
      "xact_arc_length\030\t \001(\010\022\"\n\032force_reinit_ne"
      "w_goal_dist\030\n \001(\002\022\"\n\032feasibility_check_n"
      "o_poses\030\013 \001(\003\022\030\n\020publish_feedback\030\014 \001(\010\022"
      "\023\n\013min_samples\030\r \001(\003\022\023\n\013max_samples\030\016 \001("
      "\003\"\302\002\n\016FootprintModel\022A\n\004type\030\001 \001(\01623.rob"
      "orts_local_planner.FootprintModel.Footpr"
      "intType\022\016\n\006radius\030\002 \001(\001\022\024\n\014front_offset\030"
      "\003 \001(\001\022\024\n\014front_radius\030\004 \001(\001\022\023\n\013rear_offs"
      "et\030\005 \001(\001\022\023\n\013rear_radius\030\006 \001(\001\0226\n\016robot_v"
      "ertices\030\007 \003(\0132\036.roborts_local_planner.Po"
      "int2D\"O\n\rFootprintType\022\t\n\005POINT\020\000\022\014\n\010CIR"
      "CULAR\020\001\022\016\n\nTWOCIRCLES\020\002\022\010\n\004LINE\020\003\022\013\n\007POL"
      "YGON\020\004\"\357\001\n\005Robot\022\021\n\tmax_vel_x\030\001 \001(\002\022\033\n\023m"
      "ax_vel_x_backwards\030\002 \001(\002\022\021\n\tmax_vel_y\030\003 "
      "\001(\002\022\025\n\rmax_vel_theta\030\004 \001(\002\022\021\n\tacc_lim_x\030"
      "\005 \001(\002\022\021\n\tacc_lim_y\030\006 \001(\002\022\025\n\racc_lim_thet"
      "a\030\007 \001(\002\022\032\n\022min_turning_radius\030\010 \001(\002\022\021\n\tw"
      "heelbase\030\t \001(\002\022 \n\030cmd_angle_instead_rotv"
      "el\030\n \001(\010\"]\n\rGoalTolerance\022\031\n\021xy_goal_tol"
      "erance\030\001 \001(\002\022\032\n\022yaw_goal_tolerance\030\002 \001(\002"
      "\022\025\n\rfree_goal_vel\030\003 \001(\010\"\236\003\n\tObstacles\022\031\n"
      "\021min_obstacle_dist\030\001 \001(\002\022\026\n\016inflation_di"
      "st\030\002 \001(\002\022!\n\031include_costmap_obstacles\030\003 "
      "\001(\010\022+\n#costmap_obstacles_behind_robot_di"
      "st\030\004 \001(\002\022\037\n\027obstacle_poses_affected\030\005 \001("
      "\002\022#\n\033legacy_obstacle_association\030\006 \001(\010\022*"
      "\n\"obstacle_association_cutoff_factor\030\007 \001"
      "(\002\0223\n+obstacle_association_force_inclusi"
      "on_factor\030\010 \001(\002\022 \n\030costmap_converter_plu"
      "gin\030\t \001(\t\022%\n\035costmap_converter_spin_thre"
      "ad\030\n \001(\010\022\036\n\026costmap_converter_rate\030\013 \001(\002"
      "\"\224\005\n\014Optimization\022\033\n\023no_inner_iterations"
      "\030\001 \001(\005\022\033\n\023no_outer_iterations\030\002 \001(\005\022\035\n\025o"
      "ptimization_activate\030\003 \001(\010\022\034\n\024optimizati"
      "on_verbose\030\004 \001(\010\022\027\n\017penalty_epsilon\030\005 \001("
      "\002\022\030\n\020weight_max_vel_x\030\006 \001(\002\022\030\n\020weight_ma"
      "x_vel_y\030\007 \001(\002\022\034\n\024weight_max_vel_theta\030\010 "
      "\001(\002\022\030\n\020weight_acc_lim_x\030\t \001(\002\022\030\n\020weight_"
      "acc_lim_y\030\n \001(\002\022\033\n\023weight_acc_lim_thet\030\013"
      " \001(\002\022\034\n\024weight_kinematics_nh\030\014 \001(\002\022\'\n\037we"
      "ight_kinematics_forward_drive\030\r \001(\002\022(\n w"
      "eight_kinematics_turning_radius\030\016 \001(\002\022\032\n"
      "\022weight_optimaltime\030\017 \001(\002\022\027\n\017weight_obst"
      "acle\030\020 \001(\002\022\030\n\020weight_inflation\030\021 \001(\002\022\037\n\027"
      "weight_dynamic_obstacle\030\022 \001(\002\022\027\n\017weight_"
      "viapoint\030\023 \001(\002\022\033\n\023weight_adapt_factor\030\024 "
      "\001(\002\022\034\n\024weight_prefer_rotdir\030\025 \001(\002\022\034\n\024wei"
      "ght_acc_lim_theta\030\026 \001(\002\"\201\005\n\024HomotopyClas"
      "sPlanner\022&\n\036enable_homotopy_class_planni"
      "ng\030\001 \001(\010\022\035\n\025enable_multithreading\030\002 \001(\010\022"
      "\032\n\022simple_exploration\030\003 \001(\010\022\032\n\022max_numbe"
      "r_classes\030\004 \001(\005\022!\n\031selection_obst_cost_s"
      "cale\030\005 \001(\002\022%\n\035selection_prefer_initial_p"
      "lan\030\006 \001(\002\022%\n\035selection_viapoint_cost_sca"
      "le\030\007 \001(\002\022!\n\031selection_cost_hysteresis\030\010 "
      "\001(\002\022\'\n\037selection_alternative_time_cost\030\t"
      " \001(\010\022 \n\030roadmap_graph_no_samples\030\n \001(\005\022 "
      "\n\030roadmap_graph_area_width\030\013 \001(\005\022\'\n\037road"
      "map_graph_area_length_scale\030\014 \001(\002\022\035\n\025h_s"
      "ignature_prescaler\030\r \001(\002\022\035\n\025h_signature_"
      "threshold\030\016 \001(\002\022 \n\030obstacle_keypoint_off"
      "set\030\017 \001(\002\022\"\n\032obstacle_heading_threshold\030"
      "\020 \001(\002\022 \n\030viapoints_all_candidates\030\021 \001(\010\022"
      "\032\n\022visualize_hc_graph\030\022 \001(\010\"\366\001\n\010Recovery"
      "\022#\n\033shrink_horizon_min_duration\030\001 \001(\010\022\034\n"
      "\024oscillation_recovery\030\002 \001(\010\022\035\n\025shrink_ho"
      "rizon_backup\030\003 \001(\010\022\031\n\021oscillation_v_eps\030"
      "\004 \001(\001\022\035\n\025oscillation_omega_eps\030\005 \001(\001\022)\n!"
      "oscillation_recovery_min_duration\030\006 \001(\001\022"
      "#\n\033oscillation_filter_duration\030\007 \001(\001\"\217\004\n"
      "\006Config\0221\n\topt_frame\030\001 \001(\0132\036.roborts_loc"
      "al_planner.FrameID\0229\n\016trajectory_opt\030\002 \001"
      "(\0132!.roborts_local_planner.Trajectory\0224\n"
      "\016kinematics_opt\030\003 \001(\0132\034.roborts_local_pl"
      "anner.Robot\022;\n\rtolerance_opt\030\004 \001(\0132$.rob"
      "orts_local_planner.GoalTolerance\0227\n\robst"
      "acles_opt\030\005 \001(\0132 .roborts_local_planner."
      "Obstacles\022:\n\roptimize_info\030\006 \001(\0132#.robor"
      "ts_local_planner.Optimization\022<\n\007hcp_opt"
      "\030\007 \001(\0132+.roborts_local_planner.HomotopyC"
      "lassPlanner\0229\n\nrobot_type\030\010 \003(\0132%.robort"
      "s_local_planner.FootprintModel\0226\n\rrecove"
      "ry_info\030\t \001(\0132\037.roborts_local_planner.Re"
      "covery"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3726);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "timed_elastic_band.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_timed_5felastic_5fband_2eproto
namespace roborts_local_planner {
const ::google::protobuf::EnumDescriptor* FootprintModel_FootprintType_descriptor() {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_enum_descriptors[0];
}
bool FootprintModel_FootprintType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FootprintModel_FootprintType FootprintModel::POINT;
const FootprintModel_FootprintType FootprintModel::CIRCULAR;
const FootprintModel_FootprintType FootprintModel::TWOCIRCLES;
const FootprintModel_FootprintType FootprintModel::LINE;
const FootprintModel_FootprintType FootprintModel::POLYGON;
const FootprintModel_FootprintType FootprintModel::FootprintType_MIN;
const FootprintModel_FootprintType FootprintModel::FootprintType_MAX;
const int FootprintModel::FootprintType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void FrameID::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameID::kOdomFrameFieldNumber;
const int FrameID::kMapFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameID::FrameID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_FrameID.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_local_planner.FrameID)
}
FrameID::FrameID(const FrameID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  odom_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_odom_frame()) {
    odom_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.odom_frame_);
  }
  map_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_frame()) {
    map_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_frame_);
  }
  // @@protoc_insertion_point(copy_constructor:roborts_local_planner.FrameID)
}

void FrameID::SharedCtor() {
  odom_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FrameID::~FrameID() {
  // @@protoc_insertion_point(destructor:roborts_local_planner.FrameID)
  SharedDtor();
}

void FrameID::SharedDtor() {
  odom_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrameID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FrameID::descriptor() {
  ::protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameID& FrameID::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_timed_5felastic_5fband_2eproto::scc_info_FrameID.base);
  return *internal_default_instance();
}


void FrameID::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_local_planner.FrameID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      odom_frame_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      map_frame_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_local_planner.FrameID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string odom_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_odom_frame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->odom_frame().data(), static_cast<int>(this->odom_frame().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_local_planner.FrameID.odom_frame");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_frame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_frame().data(), static_cast<int>(this->map_frame().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_local_planner.FrameID.map_frame");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_local_planner.FrameID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_local_planner.FrameID)
  return false;
#undef DO_
}

void FrameID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_local_planner.FrameID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string odom_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->odom_frame().data(), static_cast<int>(this->odom_frame().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_local_planner.FrameID.odom_frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->odom_frame(), output);
  }

  // optional string map_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_frame().data(), static_cast<int>(this->map_frame().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_local_planner.FrameID.map_frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->map_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_local_planner.FrameID)
}

::google::protobuf::uint8* FrameID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_local_planner.FrameID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string odom_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->odom_frame().data(), static_cast<int>(this->odom_frame().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_local_planner.FrameID.odom_frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->odom_frame(), target);
  }

  // optional string map_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_frame().data(), static_cast<int>(this->map_frame().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_local_planner.FrameID.map_frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->map_frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_local_planner.FrameID)
  return target;
}

size_t FrameID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_local_planner.FrameID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string odom_frame = 1;
    if (has_odom_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->odom_frame());
    }

    // optional string map_frame = 2;
    if (has_map_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_frame());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_local_planner.FrameID)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_local_planner.FrameID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_local_planner.FrameID)
    MergeFrom(*source);
  }
}

void FrameID::MergeFrom(const FrameID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_local_planner.FrameID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_odom_frame();
      odom_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.odom_frame_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_map_frame();
      map_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_frame_);
    }
  }
}

void FrameID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_local_planner.FrameID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameID::CopyFrom(const FrameID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_local_planner.FrameID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameID::IsInitialized() const {
  return true;
}

void FrameID::Swap(FrameID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameID::InternalSwap(FrameID* other) {
  using std::swap;
  odom_frame_.Swap(&other->odom_frame_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_frame_.Swap(&other->map_frame_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FrameID::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point2D::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2D::kXFieldNumber;
const int Point2D::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2D::Point2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Point2D.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_local_planner.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:roborts_local_planner.Point2D)
}

void Point2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:roborts_local_planner.Point2D)
  SharedDtor();
}

void Point2D::SharedDtor() {
}

void Point2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point2D::descriptor() {
  ::protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point2D& Point2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_timed_5felastic_5fband_2eproto::scc_info_Point2D.base);
  return *internal_default_instance();
}


void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_local_planner.Point2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_local_planner.Point2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_local_planner.Point2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_local_planner.Point2D)
  return false;
#undef DO_
}

void Point2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_local_planner.Point2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_local_planner.Point2D)
}

::google::protobuf::uint8* Point2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_local_planner.Point2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_local_planner.Point2D)
  return target;
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_local_planner.Point2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_local_planner.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_local_planner.Point2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_local_planner.Point2D)
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_local_planner.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_local_planner.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_local_planner.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::Swap(Point2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2D::InternalSwap(Point2D* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point2D::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Trajectory::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kTebAutosizeFieldNumber;
const int Trajectory::kDtRefFieldNumber;
const int Trajectory::kDtHysteresisFieldNumber;
const int Trajectory::kGlobalPlanOverwriteOrientationFieldNumber;
const int Trajectory::kAllowInitWithBackwardsMotionFieldNumber;
const int Trajectory::kGlobalPlanViapointSepFieldNumber;
const int Trajectory::kViaPointsOrderedFieldNumber;
const int Trajectory::kMaxGlobalPlanLookaheadDistFieldNumber;
const int Trajectory::kExactArcLengthFieldNumber;
const int Trajectory::kForceReinitNewGoalDistFieldNumber;
const int Trajectory::kFeasibilityCheckNoPosesFieldNumber;
const int Trajectory::kPublishFeedbackFieldNumber;
const int Trajectory::kMinSamplesFieldNumber;
const int Trajectory::kMaxSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Trajectory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_local_planner.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dt_ref_, &from.dt_ref_,
    static_cast<size_t>(reinterpret_cast<char*>(&publish_feedback_) -
    reinterpret_cast<char*>(&dt_ref_)) + sizeof(publish_feedback_));
  // @@protoc_insertion_point(copy_constructor:roborts_local_planner.Trajectory)
}

void Trajectory::SharedCtor() {
  ::memset(&dt_ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publish_feedback_) -
      reinterpret_cast<char*>(&dt_ref_)) + sizeof(publish_feedback_));
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:roborts_local_planner.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  ::protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectory& Trajectory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_timed_5felastic_5fband_2eproto::scc_info_Trajectory.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_local_planner.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&dt_ref_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_global_plan_lookahead_dist_) -
        reinterpret_cast<char*>(&dt_ref_)) + sizeof(max_global_plan_lookahead_dist_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&force_reinit_new_goal_dist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&publish_feedback_) -
        reinterpret_cast<char*>(&force_reinit_new_goal_dist_)) + sizeof(publish_feedback_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_local_planner.Trajectory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool teb_autosize = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_teb_autosize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &teb_autosize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dt_ref = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_dt_ref();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dt_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dt_hysteresis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_dt_hysteresis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dt_hysteresis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool global_plan_overwrite_orientation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_global_plan_overwrite_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_plan_overwrite_orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_init_with_backwards_motion = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_allow_init_with_backwards_motion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_init_with_backwards_motion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float global_plan_viapoint_sep = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_global_plan_viapoint_sep();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &global_plan_viapoint_sep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool via_points_ordered = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_via_points_ordered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &via_points_ordered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_global_plan_lookahead_dist = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_max_global_plan_lookahead_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_global_plan_lookahead_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exact_arc_length = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_exact_arc_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exact_arc_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float force_reinit_new_goal_dist = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_force_reinit_new_goal_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &force_reinit_new_goal_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 feasibility_check_no_poses = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_feasibility_check_no_poses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feasibility_check_no_poses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool publish_feedback = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_publish_feedback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_samples = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_min_samples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_samples = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_max_samples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_local_planner.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_local_planner.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_local_planner.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool teb_autosize = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->teb_autosize(), output);
  }

  // optional float dt_ref = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dt_ref(), output);
  }

  // optional float dt_hysteresis = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dt_hysteresis(), output);
  }

  // optional bool global_plan_overwrite_orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->global_plan_overwrite_orientation(), output);
  }

  // optional bool allow_init_with_backwards_motion = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_init_with_backwards_motion(), output);
  }

  // optional float global_plan_viapoint_sep = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->global_plan_viapoint_sep(), output);
  }

  // optional bool via_points_ordered = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->via_points_ordered(), output);
  }

  // optional float max_global_plan_lookahead_dist = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->max_global_plan_lookahead_dist(), output);
  }

  // optional bool exact_arc_length = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->exact_arc_length(), output);
  }

  // optional float force_reinit_new_goal_dist = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->force_reinit_new_goal_dist(), output);
  }

  // optional int64 feasibility_check_no_poses = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->feasibility_check_no_poses(), output);
  }

  // optional bool publish_feedback = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->publish_feedback(), output);
  }

  // optional int64 min_samples = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->min_samples(), output);
  }

  // optional int64 max_samples = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->max_samples(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_local_planner.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_local_planner.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool teb_autosize = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->teb_autosize(), target);
  }

  // optional float dt_ref = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dt_ref(), target);
  }

  // optional float dt_hysteresis = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dt_hysteresis(), target);
  }

  // optional bool global_plan_overwrite_orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->global_plan_overwrite_orientation(), target);
  }

  // optional bool allow_init_with_backwards_motion = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allow_init_with_backwards_motion(), target);
  }

  // optional float global_plan_viapoint_sep = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->global_plan_viapoint_sep(), target);
  }

  // optional bool via_points_ordered = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->via_points_ordered(), target);
  }

  // optional float max_global_plan_lookahead_dist = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->max_global_plan_lookahead_dist(), target);
  }

  // optional bool exact_arc_length = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->exact_arc_length(), target);
  }

  // optional float force_reinit_new_goal_dist = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->force_reinit_new_goal_dist(), target);
  }

  // optional int64 feasibility_check_no_poses = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->feasibility_check_no_poses(), target);
  }

  // optional bool publish_feedback = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->publish_feedback(), target);
  }

  // optional int64 min_samples = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->min_samples(), target);
  }

  // optional int64 max_samples = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->max_samples(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_local_planner.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_local_planner.Trajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float dt_ref = 2;
    if (has_dt_ref()) {
      total_size += 1 + 4;
    }

    // optional float dt_hysteresis = 3;
    if (has_dt_hysteresis()) {
      total_size += 1 + 4;
    }

    // optional bool teb_autosize = 1;
    if (has_teb_autosize()) {
      total_size += 1 + 1;
    }

    // optional bool global_plan_overwrite_orientation = 4;
    if (has_global_plan_overwrite_orientation()) {
      total_size += 1 + 1;
    }

    // optional bool allow_init_with_backwards_motion = 5;
    if (has_allow_init_with_backwards_motion()) {
      total_size += 1 + 1;
    }

    // optional bool via_points_ordered = 7;
    if (has_via_points_ordered()) {
      total_size += 1 + 1;
    }

    // optional float global_plan_viapoint_sep = 6;
    if (has_global_plan_viapoint_sep()) {
      total_size += 1 + 4;
    }

    // optional float max_global_plan_lookahead_dist = 8;
    if (has_max_global_plan_lookahead_dist()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float force_reinit_new_goal_dist = 10;
    if (has_force_reinit_new_goal_dist()) {
      total_size += 1 + 4;
    }

    // optional int64 feasibility_check_no_poses = 11;
    if (has_feasibility_check_no_poses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feasibility_check_no_poses());
    }

    // optional int64 min_samples = 13;
    if (has_min_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_samples());
    }

    // optional int64 max_samples = 14;
    if (has_max_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_samples());
    }

    // optional bool exact_arc_length = 9;
    if (has_exact_arc_length()) {
      total_size += 1 + 1;
    }

    // optional bool publish_feedback = 12;
    if (has_publish_feedback()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_local_planner.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_local_planner.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_local_planner.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_local_planner.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      dt_ref_ = from.dt_ref_;
    }
    if (cached_has_bits & 0x00000002u) {
      dt_hysteresis_ = from.dt_hysteresis_;
    }
    if (cached_has_bits & 0x00000004u) {
      teb_autosize_ = from.teb_autosize_;
    }
    if (cached_has_bits & 0x00000008u) {
      global_plan_overwrite_orientation_ = from.global_plan_overwrite_orientation_;
    }
    if (cached_has_bits & 0x00000010u) {
      allow_init_with_backwards_motion_ = from.allow_init_with_backwards_motion_;
    }
    if (cached_has_bits & 0x00000020u) {
      via_points_ordered_ = from.via_points_ordered_;
    }
    if (cached_has_bits & 0x00000040u) {
      global_plan_viapoint_sep_ = from.global_plan_viapoint_sep_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_global_plan_lookahead_dist_ = from.max_global_plan_lookahead_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      force_reinit_new_goal_dist_ = from.force_reinit_new_goal_dist_;
    }
    if (cached_has_bits & 0x00000200u) {
      feasibility_check_no_poses_ = from.feasibility_check_no_poses_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_samples_ = from.min_samples_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_samples_ = from.max_samples_;
    }
    if (cached_has_bits & 0x00001000u) {
      exact_arc_length_ = from.exact_arc_length_;
    }
    if (cached_has_bits & 0x00002000u) {
      publish_feedback_ = from.publish_feedback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_local_planner.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_local_planner.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  swap(dt_ref_, other->dt_ref_);
  swap(dt_hysteresis_, other->dt_hysteresis_);
  swap(teb_autosize_, other->teb_autosize_);
  swap(global_plan_overwrite_orientation_, other->global_plan_overwrite_orientation_);
  swap(allow_init_with_backwards_motion_, other->allow_init_with_backwards_motion_);
  swap(via_points_ordered_, other->via_points_ordered_);
  swap(global_plan_viapoint_sep_, other->global_plan_viapoint_sep_);
  swap(max_global_plan_lookahead_dist_, other->max_global_plan_lookahead_dist_);
  swap(force_reinit_new_goal_dist_, other->force_reinit_new_goal_dist_);
  swap(feasibility_check_no_poses_, other->feasibility_check_no_poses_);
  swap(min_samples_, other->min_samples_);
  swap(max_samples_, other->max_samples_);
  swap(exact_arc_length_, other->exact_arc_length_);
  swap(publish_feedback_, other->publish_feedback_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FootprintModel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FootprintModel::kTypeFieldNumber;
const int FootprintModel::kRadiusFieldNumber;
const int FootprintModel::kFrontOffsetFieldNumber;
const int FootprintModel::kFrontRadiusFieldNumber;
const int FootprintModel::kRearOffsetFieldNumber;
const int FootprintModel::kRearRadiusFieldNumber;
const int FootprintModel::kRobotVerticesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FootprintModel::FootprintModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_FootprintModel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_local_planner.FootprintModel)
}
FootprintModel::FootprintModel(const FootprintModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      robot_vertices_(from.robot_vertices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:roborts_local_planner.FootprintModel)
}

void FootprintModel::SharedCtor() {
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(type_));
}

FootprintModel::~FootprintModel() {
  // @@protoc_insertion_point(destructor:roborts_local_planner.FootprintModel)
  SharedDtor();
}

void FootprintModel::SharedDtor() {
}

void FootprintModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FootprintModel::descriptor() {
  ::protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FootprintModel& FootprintModel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_timed_5felastic_5fband_2eproto::scc_info_FootprintModel.base);
  return *internal_default_instance();
}


void FootprintModel::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_local_planner.FootprintModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_vertices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FootprintModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_local_planner.FootprintModel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .roborts_local_planner.FootprintModel.FootprintType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::roborts_local_planner::FootprintModel_FootprintType_IsValid(value)) {
            set_type(static_cast< ::roborts_local_planner::FootprintModel_FootprintType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radius = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double front_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_front_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double front_radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_front_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rear_offset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_rear_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rear_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rear_radius = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_rear_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rear_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .roborts_local_planner.Point2D robot_vertices = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_robot_vertices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_local_planner.FootprintModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_local_planner.FootprintModel)
  return false;
#undef DO_
}

void FootprintModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_local_planner.FootprintModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .roborts_local_planner.FootprintModel.FootprintType type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double radius = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radius(), output);
  }

  // optional double front_offset = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->front_offset(), output);
  }

  // optional double front_radius = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->front_radius(), output);
  }

  // optional double rear_offset = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->rear_offset(), output);
  }

  // optional double rear_radius = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rear_radius(), output);
  }

  // repeated .roborts_local_planner.Point2D robot_vertices = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_vertices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->robot_vertices(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_local_planner.FootprintModel)
}

::google::protobuf::uint8* FootprintModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_local_planner.FootprintModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .roborts_local_planner.FootprintModel.FootprintType type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double radius = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radius(), target);
  }

  // optional double front_offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->front_offset(), target);
  }

  // optional double front_radius = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->front_radius(), target);
  }

  // optional double rear_offset = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->rear_offset(), target);
  }

  // optional double rear_radius = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rear_radius(), target);
  }

  // repeated .roborts_local_planner.Point2D robot_vertices = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_vertices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->robot_vertices(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_local_planner.FootprintModel)
  return target;
}

size_t FootprintModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_local_planner.FootprintModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .roborts_local_planner.Point2D robot_vertices = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->robot_vertices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->robot_vertices(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional double radius = 2;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // optional double front_offset = 3;
    if (has_front_offset()) {
      total_size += 1 + 8;
    }

    // optional double front_radius = 4;
    if (has_front_radius()) {
      total_size += 1 + 8;
    }

    // optional double rear_offset = 5;
    if (has_rear_offset()) {
      total_size += 1 + 8;
    }

    // optional double rear_radius = 6;
    if (has_rear_radius()) {
      total_size += 1 + 8;
    }

    // optional .roborts_local_planner.FootprintModel.FootprintType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FootprintModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_local_planner.FootprintModel)
  GOOGLE_DCHECK_NE(&from, this);
  const FootprintModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FootprintModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_local_planner.FootprintModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_local_planner.FootprintModel)
    MergeFrom(*source);
  }
}

void FootprintModel::MergeFrom(const FootprintModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_local_planner.FootprintModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_vertices_.MergeFrom(from.robot_vertices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000002u) {
      front_offset_ = from.front_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      front_radius_ = from.front_radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      rear_offset_ = from.rear_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      rear_radius_ = from.rear_radius_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FootprintModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_local_planner.FootprintModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FootprintModel::CopyFrom(const FootprintModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_local_planner.FootprintModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FootprintModel::IsInitialized() const {
  return true;
}

void FootprintModel::Swap(FootprintModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FootprintModel::InternalSwap(FootprintModel* other) {
  using std::swap;
  CastToBase(&robot_vertices_)->InternalSwap(CastToBase(&other->robot_vertices_));
  swap(radius_, other->radius_);
  swap(front_offset_, other->front_offset_);
  swap(front_radius_, other->front_radius_);
  swap(rear_offset_, other->rear_offset_);
  swap(rear_radius_, other->rear_radius_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FootprintModel::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Robot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot::kMaxVelXFieldNumber;
const int Robot::kMaxVelXBackwardsFieldNumber;
const int Robot::kMaxVelYFieldNumber;
const int Robot::kMaxVelThetaFieldNumber;
const int Robot::kAccLimXFieldNumber;
const int Robot::kAccLimYFieldNumber;
const int Robot::kAccLimThetaFieldNumber;
const int Robot::kMinTurningRadiusFieldNumber;
const int Robot::kWheelbaseFieldNumber;
const int Robot::kCmdAngleInsteadRotvelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot::Robot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Robot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_local_planner.Robot)
}
Robot::Robot(const Robot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_vel_x_, &from.max_vel_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_angle_instead_rotvel_) -
    reinterpret_cast<char*>(&max_vel_x_)) + sizeof(cmd_angle_instead_rotvel_));
  // @@protoc_insertion_point(copy_constructor:roborts_local_planner.Robot)
}

void Robot::SharedCtor() {
  ::memset(&max_vel_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_angle_instead_rotvel_) -
      reinterpret_cast<char*>(&max_vel_x_)) + sizeof(cmd_angle_instead_rotvel_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:roborts_local_planner.Robot)
  SharedDtor();
}

void Robot::SharedDtor() {
}

void Robot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  ::protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robot& Robot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_timed_5felastic_5fband_2eproto::scc_info_Robot.base);
  return *internal_default_instance();
}


void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_local_planner.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&max_vel_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_turning_radius_) -
        reinterpret_cast<char*>(&max_vel_x_)) + sizeof(min_turning_radius_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&wheelbase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmd_angle_instead_rotvel_) -
        reinterpret_cast<char*>(&wheelbase_)) + sizeof(cmd_angle_instead_rotvel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_local_planner.Robot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float max_vel_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_max_vel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_vel_x_backwards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_max_vel_x_backwards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_vel_x_backwards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_vel_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_max_vel_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_vel_theta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_max_vel_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_vel_theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_lim_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_acc_lim_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_lim_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_lim_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_acc_lim_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_lim_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_lim_theta = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_acc_lim_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_lim_theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_turning_radius = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_min_turning_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_turning_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheelbase = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_wheelbase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheelbase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cmd_angle_instead_rotvel = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_cmd_angle_instead_rotvel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cmd_angle_instead_rotvel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_local_planner.Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_local_planner.Robot)
  return false;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_local_planner.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_vel_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->max_vel_x(), output);
  }

  // optional float max_vel_x_backwards = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_vel_x_backwards(), output);
  }

  // optional float max_vel_y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_vel_y(), output);
  }

  // optional float max_vel_theta = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_vel_theta(), output);
  }

  // optional float acc_lim_x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->acc_lim_x(), output);
  }

  // optional float acc_lim_y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->acc_lim_y(), output);
  }

  // optional float acc_lim_theta = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->acc_lim_theta(), output);
  }

  // optional float min_turning_radius = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->min_turning_radius(), output);
  }

  // optional float wheelbase = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->wheelbase(), output);
  }

  // optional bool cmd_angle_instead_rotvel = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->cmd_angle_instead_rotvel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_local_planner.Robot)
}

::google::protobuf::uint8* Robot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_local_planner.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_vel_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->max_vel_x(), target);
  }

  // optional float max_vel_x_backwards = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_vel_x_backwards(), target);
  }

  // optional float max_vel_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_vel_y(), target);
  }

  // optional float max_vel_theta = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_vel_theta(), target);
  }

  // optional float acc_lim_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->acc_lim_x(), target);
  }

  // optional float acc_lim_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->acc_lim_y(), target);
  }

  // optional float acc_lim_theta = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->acc_lim_theta(), target);
  }

  // optional float min_turning_radius = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->min_turning_radius(), target);
  }

  // optional float wheelbase = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->wheelbase(), target);
  }

  // optional bool cmd_angle_instead_rotvel = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->cmd_angle_instead_rotvel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_local_planner.Robot)
  return target;
}

size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_local_planner.Robot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float max_vel_x = 1;
    if (has_max_vel_x()) {
      total_size += 1 + 4;
    }

    // optional float max_vel_x_backwards = 2;
    if (has_max_vel_x_backwards()) {
      total_size += 1 + 4;
    }

    // optional float max_vel_y = 3;
    if (has_max_vel_y()) {
      total_size += 1 + 4;
    }

    // optional float max_vel_theta = 4;
    if (has_max_vel_theta()) {
      total_size += 1 + 4;
    }

    // optional float acc_lim_x = 5;
    if (has_acc_lim_x()) {
      total_size += 1 + 4;
    }

    // optional float acc_lim_y = 6;
    if (has_acc_lim_y()) {
      total_size += 1 + 4;
    }

    // optional float acc_lim_theta = 7;
    if (has_acc_lim_theta()) {
      total_size += 1 + 4;
    }

    // optional float min_turning_radius = 8;
    if (has_min_turning_radius()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float wheelbase = 9;
    if (has_wheelbase()) {
      total_size += 1 + 4;
    }

    // optional bool cmd_angle_instead_rotvel = 10;
    if (has_cmd_angle_instead_rotvel()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_local_planner.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_local_planner.Robot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_local_planner.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_local_planner.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      max_vel_x_ = from.max_vel_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_vel_x_backwards_ = from.max_vel_x_backwards_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_vel_y_ = from.max_vel_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_vel_theta_ = from.max_vel_theta_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_lim_x_ = from.acc_lim_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      acc_lim_y_ = from.acc_lim_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      acc_lim_theta_ = from.acc_lim_theta_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_turning_radius_ = from.min_turning_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      wheelbase_ = from.wheelbase_;
    }
    if (cached_has_bits & 0x00000200u) {
      cmd_angle_instead_rotvel_ = from.cmd_angle_instead_rotvel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_local_planner.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_local_planner.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  return true;
}

void Robot::Swap(Robot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot::InternalSwap(Robot* other) {
  using std::swap;
  swap(max_vel_x_, other->max_vel_x_);
  swap(max_vel_x_backwards_, other->max_vel_x_backwards_);
  swap(max_vel_y_, other->max_vel_y_);
  swap(max_vel_theta_, other->max_vel_theta_);
  swap(acc_lim_x_, other->acc_lim_x_);
  swap(acc_lim_y_, other->acc_lim_y_);
  swap(acc_lim_theta_, other->acc_lim_theta_);
  swap(min_turning_radius_, other->min_turning_radius_);
  swap(wheelbase_, other->wheelbase_);
  swap(cmd_angle_instead_rotvel_, other->cmd_angle_instead_rotvel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GoalTolerance::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoalTolerance::kXyGoalToleranceFieldNumber;
const int GoalTolerance::kYawGoalToleranceFieldNumber;
const int GoalTolerance::kFreeGoalVelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoalTolerance::GoalTolerance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_GoalTolerance.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_local_planner.GoalTolerance)
}
GoalTolerance::GoalTolerance(const GoalTolerance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xy_goal_tolerance_, &from.xy_goal_tolerance_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_goal_vel_) -
    reinterpret_cast<char*>(&xy_goal_tolerance_)) + sizeof(free_goal_vel_));
  // @@protoc_insertion_point(copy_constructor:roborts_local_planner.GoalTolerance)
}

void GoalTolerance::SharedCtor() {
  ::memset(&xy_goal_tolerance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_goal_vel_) -
      reinterpret_cast<char*>(&xy_goal_tolerance_)) + sizeof(free_goal_vel_));
}

GoalTolerance::~GoalTolerance() {
  // @@protoc_insertion_point(destructor:roborts_local_planner.GoalTolerance)
  SharedDtor();
}

void GoalTolerance::SharedDtor() {
}

void GoalTolerance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GoalTolerance::descriptor() {
  ::protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GoalTolerance& GoalTolerance::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_timed_5felastic_5fband_2eproto::scc_info_GoalTolerance.base);
  return *internal_default_instance();
}


void GoalTolerance::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_local_planner.GoalTolerance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&xy_goal_tolerance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&free_goal_vel_) -
        reinterpret_cast<char*>(&xy_goal_tolerance_)) + sizeof(free_goal_vel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GoalTolerance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_local_planner.GoalTolerance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float xy_goal_tolerance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_xy_goal_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xy_goal_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw_goal_tolerance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_yaw_goal_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_goal_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool free_goal_vel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_free_goal_vel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &free_goal_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_local_planner.GoalTolerance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_local_planner.GoalTolerance)
  return false;
#undef DO_
}

void GoalTolerance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_local_planner.GoalTolerance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xy_goal_tolerance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->xy_goal_tolerance(), output);
  }

  // optional float yaw_goal_tolerance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw_goal_tolerance(), output);
  }

  // optional bool free_goal_vel = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->free_goal_vel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_local_planner.GoalTolerance)
}

::google::protobuf::uint8* GoalTolerance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_local_planner.GoalTolerance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xy_goal_tolerance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->xy_goal_tolerance(), target);
  }

  // optional float yaw_goal_tolerance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw_goal_tolerance(), target);
  }

  // optional bool free_goal_vel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->free_goal_vel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_local_planner.GoalTolerance)
  return target;
}

size_t GoalTolerance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_local_planner.GoalTolerance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float xy_goal_tolerance = 1;
    if (has_xy_goal_tolerance()) {
      total_size += 1 + 4;
    }

    // optional float yaw_goal_tolerance = 2;
    if (has_yaw_goal_tolerance()) {
      total_size += 1 + 4;
    }

    // optional bool free_goal_vel = 3;
    if (has_free_goal_vel()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GoalTolerance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_local_planner.GoalTolerance)
  GOOGLE_DCHECK_NE(&from, this);
  const GoalTolerance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GoalTolerance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_local_planner.GoalTolerance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_local_planner.GoalTolerance)
    MergeFrom(*source);
  }
}

void GoalTolerance::MergeFrom(const GoalTolerance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_local_planner.GoalTolerance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      xy_goal_tolerance_ = from.xy_goal_tolerance_;
    }
    if (cached_has_bits & 0x00000002u) {
      yaw_goal_tolerance_ = from.yaw_goal_tolerance_;
    }
    if (cached_has_bits & 0x00000004u) {
      free_goal_vel_ = from.free_goal_vel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GoalTolerance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_local_planner.GoalTolerance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalTolerance::CopyFrom(const GoalTolerance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_local_planner.GoalTolerance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalTolerance::IsInitialized() const {
  return true;
}

void GoalTolerance::Swap(GoalTolerance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoalTolerance::InternalSwap(GoalTolerance* other) {
  using std::swap;
  swap(xy_goal_tolerance_, other->xy_goal_tolerance_);
  swap(yaw_goal_tolerance_, other->yaw_goal_tolerance_);
  swap(free_goal_vel_, other->free_goal_vel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GoalTolerance::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Obstacles::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacles::kMinObstacleDistFieldNumber;
const int Obstacles::kInflationDistFieldNumber;
const int Obstacles::kIncludeCostmapObstaclesFieldNumber;
const int Obstacles::kCostmapObstaclesBehindRobotDistFieldNumber;
const int Obstacles::kObstaclePosesAffectedFieldNumber;
const int Obstacles::kLegacyObstacleAssociationFieldNumber;
const int Obstacles::kObstacleAssociationCutoffFactorFieldNumber;
const int Obstacles::kObstacleAssociationForceInclusionFactorFieldNumber;
const int Obstacles::kCostmapConverterPluginFieldNumber;
const int Obstacles::kCostmapConverterSpinThreadFieldNumber;
const int Obstacles::kCostmapConverterRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacles::Obstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Obstacles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_local_planner.Obstacles)
}
Obstacles::Obstacles(const Obstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  costmap_converter_plugin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_costmap_converter_plugin()) {
    costmap_converter_plugin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.costmap_converter_plugin_);
  }
  ::memcpy(&min_obstacle_dist_, &from.min_obstacle_dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&costmap_converter_rate_) -
    reinterpret_cast<char*>(&min_obstacle_dist_)) + sizeof(costmap_converter_rate_));
  // @@protoc_insertion_point(copy_constructor:roborts_local_planner.Obstacles)
}

void Obstacles::SharedCtor() {
  costmap_converter_plugin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_obstacle_dist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costmap_converter_rate_) -
      reinterpret_cast<char*>(&min_obstacle_dist_)) + sizeof(costmap_converter_rate_));
}

Obstacles::~Obstacles() {
  // @@protoc_insertion_point(destructor:roborts_local_planner.Obstacles)
  SharedDtor();
}

void Obstacles::SharedDtor() {
  costmap_converter_plugin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Obstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Obstacles::descriptor() {
  ::protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Obstacles& Obstacles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_timed_5felastic_5fband_2eproto::scc_info_Obstacles.base);
  return *internal_default_instance();
}


void Obstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_local_planner.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    costmap_converter_plugin_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&min_obstacle_dist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&costmap_converter_spin_thread_) -
        reinterpret_cast<char*>(&min_obstacle_dist_)) + sizeof(costmap_converter_spin_thread_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&obstacle_association_cutoff_factor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&costmap_converter_rate_) -
        reinterpret_cast<char*>(&obstacle_association_cutoff_factor_)) + sizeof(costmap_converter_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Obstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_local_planner.Obstacles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_obstacle_dist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_obstacle_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_obstacle_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float inflation_dist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_inflation_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inflation_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_costmap_obstacles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_include_costmap_obstacles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_costmap_obstacles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float costmap_obstacles_behind_robot_dist = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_costmap_obstacles_behind_robot_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &costmap_obstacles_behind_robot_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obstacle_poses_affected = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_obstacle_poses_affected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obstacle_poses_affected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool legacy_obstacle_association = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_legacy_obstacle_association();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_obstacle_association_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obstacle_association_cutoff_factor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_obstacle_association_cutoff_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obstacle_association_cutoff_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obstacle_association_force_inclusion_factor = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_obstacle_association_force_inclusion_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obstacle_association_force_inclusion_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string costmap_converter_plugin = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_costmap_converter_plugin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->costmap_converter_plugin().data(), static_cast<int>(this->costmap_converter_plugin().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_local_planner.Obstacles.costmap_converter_plugin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool costmap_converter_spin_thread = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_costmap_converter_spin_thread();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &costmap_converter_spin_thread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float costmap_converter_rate = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_costmap_converter_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &costmap_converter_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_local_planner.Obstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_local_planner.Obstacles)
  return false;
#undef DO_
}

void Obstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_local_planner.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_obstacle_dist = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_obstacle_dist(), output);
  }

  // optional float inflation_dist = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->inflation_dist(), output);
  }

  // optional bool include_costmap_obstacles = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_costmap_obstacles(), output);
  }

  // optional float costmap_obstacles_behind_robot_dist = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->costmap_obstacles_behind_robot_dist(), output);
  }

  // optional float obstacle_poses_affected = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->obstacle_poses_affected(), output);
  }

  // optional bool legacy_obstacle_association = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->legacy_obstacle_association(), output);
  }

  // optional float obstacle_association_cutoff_factor = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->obstacle_association_cutoff_factor(), output);
  }

  // optional float obstacle_association_force_inclusion_factor = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->obstacle_association_force_inclusion_factor(), output);
  }

  // optional string costmap_converter_plugin = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->costmap_converter_plugin().data(), static_cast<int>(this->costmap_converter_plugin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_local_planner.Obstacles.costmap_converter_plugin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->costmap_converter_plugin(), output);
  }

  // optional bool costmap_converter_spin_thread = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->costmap_converter_spin_thread(), output);
  }

  // optional float costmap_converter_rate = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->costmap_converter_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_local_planner.Obstacles)
}

::google::protobuf::uint8* Obstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_local_planner.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_obstacle_dist = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_obstacle_dist(), target);
  }

  // optional float inflation_dist = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->inflation_dist(), target);
  }

  // optional bool include_costmap_obstacles = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_costmap_obstacles(), target);
  }

  // optional float costmap_obstacles_behind_robot_dist = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->costmap_obstacles_behind_robot_dist(), target);
  }

  // optional float obstacle_poses_affected = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->obstacle_poses_affected(), target);
  }

  // optional bool legacy_obstacle_association = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->legacy_obstacle_association(), target);
  }

  // optional float obstacle_association_cutoff_factor = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->obstacle_association_cutoff_factor(), target);
  }

  // optional float obstacle_association_force_inclusion_factor = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->obstacle_association_force_inclusion_factor(), target);
  }

  // optional string costmap_converter_plugin = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->costmap_converter_plugin().data(), static_cast<int>(this->costmap_converter_plugin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_local_planner.Obstacles.costmap_converter_plugin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->costmap_converter_plugin(), target);
  }

  // optional bool costmap_converter_spin_thread = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->costmap_converter_spin_thread(), target);
  }

  // optional float costmap_converter_rate = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->costmap_converter_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_local_planner.Obstacles)
  return target;
}

size_t Obstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_local_planner.Obstacles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string costmap_converter_plugin = 9;
    if (has_costmap_converter_plugin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->costmap_converter_plugin());
    }

    // optional float min_obstacle_dist = 1;
    if (has_min_obstacle_dist()) {
      total_size += 1 + 4;
    }

    // optional float inflation_dist = 2;
    if (has_inflation_dist()) {
      total_size += 1 + 4;
    }

    // optional float costmap_obstacles_behind_robot_dist = 4;
    if (has_costmap_obstacles_behind_robot_dist()) {
      total_size += 1 + 4;
    }

    // optional float obstacle_poses_affected = 5;
    if (has_obstacle_poses_affected()) {
      total_size += 1 + 4;
    }

    // optional bool include_costmap_obstacles = 3;
    if (has_include_costmap_obstacles()) {
      total_size += 1 + 1;
    }

    // optional bool legacy_obstacle_association = 6;
    if (has_legacy_obstacle_association()) {
      total_size += 1 + 1;
    }

    // optional bool costmap_converter_spin_thread = 10;
    if (has_costmap_converter_spin_thread()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float obstacle_association_cutoff_factor = 7;
    if (has_obstacle_association_cutoff_factor()) {
      total_size += 1 + 4;
    }

    // optional float obstacle_association_force_inclusion_factor = 8;
    if (has_obstacle_association_force_inclusion_factor()) {
      total_size += 1 + 4;
    }

    // optional float costmap_converter_rate = 11;
    if (has_costmap_converter_rate()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_local_planner.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Obstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_local_planner.Obstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_local_planner.Obstacles)
    MergeFrom(*source);
  }
}

void Obstacles::MergeFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_local_planner.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_costmap_converter_plugin();
      costmap_converter_plugin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.costmap_converter_plugin_);
    }
    if (cached_has_bits & 0x00000002u) {
      min_obstacle_dist_ = from.min_obstacle_dist_;
    }
    if (cached_has_bits & 0x00000004u) {
      inflation_dist_ = from.inflation_dist_;
    }
    if (cached_has_bits & 0x00000008u) {
      costmap_obstacles_behind_robot_dist_ = from.costmap_obstacles_behind_robot_dist_;
    }
    if (cached_has_bits & 0x00000010u) {
      obstacle_poses_affected_ = from.obstacle_poses_affected_;
    }
    if (cached_has_bits & 0x00000020u) {
      include_costmap_obstacles_ = from.include_costmap_obstacles_;
    }
    if (cached_has_bits & 0x00000040u) {
      legacy_obstacle_association_ = from.legacy_obstacle_association_;
    }
    if (cached_has_bits & 0x00000080u) {
      costmap_converter_spin_thread_ = from.costmap_converter_spin_thread_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      obstacle_association_cutoff_factor_ = from.obstacle_association_cutoff_factor_;
    }
    if (cached_has_bits & 0x00000200u) {
      obstacle_association_force_inclusion_factor_ = from.obstacle_association_force_inclusion_factor_;
    }
    if (cached_has_bits & 0x00000400u) {
      costmap_converter_rate_ = from.costmap_converter_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Obstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_local_planner.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacles::CopyFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_local_planner.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacles::IsInitialized() const {
  return true;
}

void Obstacles::Swap(Obstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacles::InternalSwap(Obstacles* other) {
  using std::swap;
  costmap_converter_plugin_.Swap(&other->costmap_converter_plugin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_obstacle_dist_, other->min_obstacle_dist_);
  swap(inflation_dist_, other->inflation_dist_);
  swap(costmap_obstacles_behind_robot_dist_, other->costmap_obstacles_behind_robot_dist_);
  swap(obstacle_poses_affected_, other->obstacle_poses_affected_);
  swap(include_costmap_obstacles_, other->include_costmap_obstacles_);
  swap(legacy_obstacle_association_, other->legacy_obstacle_association_);
  swap(costmap_converter_spin_thread_, other->costmap_converter_spin_thread_);
  swap(obstacle_association_cutoff_factor_, other->obstacle_association_cutoff_factor_);
  swap(obstacle_association_force_inclusion_factor_, other->obstacle_association_force_inclusion_factor_);
  swap(costmap_converter_rate_, other->costmap_converter_rate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Obstacles::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Optimization::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Optimization::kNoInnerIterationsFieldNumber;
const int Optimization::kNoOuterIterationsFieldNumber;
const int Optimization::kOptimizationActivateFieldNumber;
const int Optimization::kOptimizationVerboseFieldNumber;
const int Optimization::kPenaltyEpsilonFieldNumber;
const int Optimization::kWeightMaxVelXFieldNumber;
const int Optimization::kWeightMaxVelYFieldNumber;
const int Optimization::kWeightMaxVelThetaFieldNumber;
const int Optimization::kWeightAccLimXFieldNumber;
const int Optimization::kWeightAccLimYFieldNumber;
const int Optimization::kWeightAccLimThetFieldNumber;
const int Optimization::kWeightKinematicsNhFieldNumber;
const int Optimization::kWeightKinematicsForwardDriveFieldNumber;
const int Optimization::kWeightKinematicsTurningRadiusFieldNumber;
const int Optimization::kWeightOptimaltimeFieldNumber;
const int Optimization::kWeightObstacleFieldNumber;
const int Optimization::kWeightInflationFieldNumber;
const int Optimization::kWeightDynamicObstacleFieldNumber;
const int Optimization::kWeightViapointFieldNumber;
const int Optimization::kWeightAdaptFactorFieldNumber;
const int Optimization::kWeightPreferRotdirFieldNumber;
const int Optimization::kWeightAccLimThetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Optimization::Optimization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Optimization.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_local_planner.Optimization)
}
Optimization::Optimization(const Optimization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&no_inner_iterations_, &from.no_inner_iterations_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_acc_lim_theta_) -
    reinterpret_cast<char*>(&no_inner_iterations_)) + sizeof(weight_acc_lim_theta_));
  // @@protoc_insertion_point(copy_constructor:roborts_local_planner.Optimization)
}

void Optimization::SharedCtor() {
  ::memset(&no_inner_iterations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_acc_lim_theta_) -
      reinterpret_cast<char*>(&no_inner_iterations_)) + sizeof(weight_acc_lim_theta_));
}

Optimization::~Optimization() {
  // @@protoc_insertion_point(destructor:roborts_local_planner.Optimization)
  SharedDtor();
}

void Optimization::SharedDtor() {
}

void Optimization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Optimization::descriptor() {
  ::protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Optimization& Optimization::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_timed_5felastic_5fband_2eproto::scc_info_Optimization.base);
  return *internal_default_instance();
}


void Optimization::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_local_planner.Optimization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&no_inner_iterations_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_max_vel_theta_) -
        reinterpret_cast<char*>(&no_inner_iterations_)) + sizeof(weight_max_vel_theta_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&weight_acc_lim_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_obstacle_) -
        reinterpret_cast<char*>(&weight_acc_lim_x_)) + sizeof(weight_obstacle_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&weight_inflation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_acc_lim_theta_) -
        reinterpret_cast<char*>(&weight_inflation_)) + sizeof(weight_acc_lim_theta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Optimization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_local_planner.Optimization)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 no_inner_iterations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_no_inner_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_inner_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 no_outer_iterations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_no_outer_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_outer_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool optimization_activate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_optimization_activate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optimization_activate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool optimization_verbose = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_optimization_verbose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optimization_verbose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float penalty_epsilon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_penalty_epsilon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &penalty_epsilon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_max_vel_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_weight_max_vel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_max_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_max_vel_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_weight_max_vel_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_max_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_max_vel_theta = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_weight_max_vel_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_max_vel_theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_acc_lim_x = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_weight_acc_lim_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_acc_lim_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_acc_lim_y = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_weight_acc_lim_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_acc_lim_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_acc_lim_thet = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_weight_acc_lim_thet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_acc_lim_thet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_kinematics_nh = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_weight_kinematics_nh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_kinematics_nh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_kinematics_forward_drive = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_weight_kinematics_forward_drive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_kinematics_forward_drive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_kinematics_turning_radius = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_weight_kinematics_turning_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_kinematics_turning_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_optimaltime = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_weight_optimaltime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_optimaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_obstacle = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_weight_obstacle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_obstacle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_inflation = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_weight_inflation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_inflation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_dynamic_obstacle = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_weight_dynamic_obstacle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_dynamic_obstacle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_viapoint = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_weight_viapoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_viapoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_adapt_factor = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_weight_adapt_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_adapt_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_prefer_rotdir = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
          set_has_weight_prefer_rotdir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_prefer_rotdir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_acc_lim_theta = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          set_has_weight_acc_lim_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_acc_lim_theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_local_planner.Optimization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_local_planner.Optimization)
  return false;
#undef DO_
}

void Optimization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_local_planner.Optimization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 no_inner_iterations = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->no_inner_iterations(), output);
  }

  // optional int32 no_outer_iterations = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->no_outer_iterations(), output);
  }

  // optional bool optimization_activate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->optimization_activate(), output);
  }

  // optional bool optimization_verbose = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->optimization_verbose(), output);
  }

  // optional float penalty_epsilon = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->penalty_epsilon(), output);
  }

  // optional float weight_max_vel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->weight_max_vel_x(), output);
  }

  // optional float weight_max_vel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->weight_max_vel_y(), output);
  }

  // optional float weight_max_vel_theta = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->weight_max_vel_theta(), output);
  }

  // optional float weight_acc_lim_x = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->weight_acc_lim_x(), output);
  }

  // optional float weight_acc_lim_y = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->weight_acc_lim_y(), output);
  }

  // optional float weight_acc_lim_thet = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->weight_acc_lim_thet(), output);
  }

  // optional float weight_kinematics_nh = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->weight_kinematics_nh(), output);
  }

  // optional float weight_kinematics_forward_drive = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->weight_kinematics_forward_drive(), output);
  }

  // optional float weight_kinematics_turning_radius = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->weight_kinematics_turning_radius(), output);
  }

  // optional float weight_optimaltime = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->weight_optimaltime(), output);
  }

  // optional float weight_obstacle = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->weight_obstacle(), output);
  }

  // optional float weight_inflation = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->weight_inflation(), output);
  }

  // optional float weight_dynamic_obstacle = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->weight_dynamic_obstacle(), output);
  }

  // optional float weight_viapoint = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->weight_viapoint(), output);
  }

  // optional float weight_adapt_factor = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->weight_adapt_factor(), output);
  }

  // optional float weight_prefer_rotdir = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->weight_prefer_rotdir(), output);
  }

  // optional float weight_acc_lim_theta = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->weight_acc_lim_theta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_local_planner.Optimization)
}

::google::protobuf::uint8* Optimization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_local_planner.Optimization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 no_inner_iterations = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->no_inner_iterations(), target);
  }

  // optional int32 no_outer_iterations = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->no_outer_iterations(), target);
  }

  // optional bool optimization_activate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->optimization_activate(), target);
  }

  // optional bool optimization_verbose = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->optimization_verbose(), target);
  }

  // optional float penalty_epsilon = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->penalty_epsilon(), target);
  }

  // optional float weight_max_vel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->weight_max_vel_x(), target);
  }

  // optional float weight_max_vel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->weight_max_vel_y(), target);
  }

  // optional float weight_max_vel_theta = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->weight_max_vel_theta(), target);
  }

  // optional float weight_acc_lim_x = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->weight_acc_lim_x(), target);
  }

  // optional float weight_acc_lim_y = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->weight_acc_lim_y(), target);
  }

  // optional float weight_acc_lim_thet = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->weight_acc_lim_thet(), target);
  }

  // optional float weight_kinematics_nh = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->weight_kinematics_nh(), target);
  }

  // optional float weight_kinematics_forward_drive = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->weight_kinematics_forward_drive(), target);
  }

  // optional float weight_kinematics_turning_radius = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->weight_kinematics_turning_radius(), target);
  }

  // optional float weight_optimaltime = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->weight_optimaltime(), target);
  }

  // optional float weight_obstacle = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->weight_obstacle(), target);
  }

  // optional float weight_inflation = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->weight_inflation(), target);
  }

  // optional float weight_dynamic_obstacle = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->weight_dynamic_obstacle(), target);
  }

  // optional float weight_viapoint = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->weight_viapoint(), target);
  }

  // optional float weight_adapt_factor = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->weight_adapt_factor(), target);
  }

  // optional float weight_prefer_rotdir = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->weight_prefer_rotdir(), target);
  }

  // optional float weight_acc_lim_theta = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->weight_acc_lim_theta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_local_planner.Optimization)
  return target;
}

size_t Optimization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_local_planner.Optimization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 no_inner_iterations = 1;
    if (has_no_inner_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->no_inner_iterations());
    }

    // optional int32 no_outer_iterations = 2;
    if (has_no_outer_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->no_outer_iterations());
    }

    // optional bool optimization_activate = 3;
    if (has_optimization_activate()) {
      total_size += 1 + 1;
    }

    // optional bool optimization_verbose = 4;
    if (has_optimization_verbose()) {
      total_size += 1 + 1;
    }

    // optional float penalty_epsilon = 5;
    if (has_penalty_epsilon()) {
      total_size += 1 + 4;
    }

    // optional float weight_max_vel_x = 6;
    if (has_weight_max_vel_x()) {
      total_size += 1 + 4;
    }

    // optional float weight_max_vel_y = 7;
    if (has_weight_max_vel_y()) {
      total_size += 1 + 4;
    }

    // optional float weight_max_vel_theta = 8;
    if (has_weight_max_vel_theta()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float weight_acc_lim_x = 9;
    if (has_weight_acc_lim_x()) {
      total_size += 1 + 4;
    }

    // optional float weight_acc_lim_y = 10;
    if (has_weight_acc_lim_y()) {
      total_size += 1 + 4;
    }

    // optional float weight_acc_lim_thet = 11;
    if (has_weight_acc_lim_thet()) {
      total_size += 1 + 4;
    }

    // optional float weight_kinematics_nh = 12;
    if (has_weight_kinematics_nh()) {
      total_size += 1 + 4;
    }

    // optional float weight_kinematics_forward_drive = 13;
    if (has_weight_kinematics_forward_drive()) {
      total_size += 1 + 4;
    }

    // optional float weight_kinematics_turning_radius = 14;
    if (has_weight_kinematics_turning_radius()) {
      total_size += 1 + 4;
    }

    // optional float weight_optimaltime = 15;
    if (has_weight_optimaltime()) {
      total_size += 1 + 4;
    }

    // optional float weight_obstacle = 16;
    if (has_weight_obstacle()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional float weight_inflation = 17;
    if (has_weight_inflation()) {
      total_size += 2 + 4;
    }

    // optional float weight_dynamic_obstacle = 18;
    if (has_weight_dynamic_obstacle()) {
      total_size += 2 + 4;
    }

    // optional float weight_viapoint = 19;
    if (has_weight_viapoint()) {
      total_size += 2 + 4;
    }

    // optional float weight_adapt_factor = 20;
    if (has_weight_adapt_factor()) {
      total_size += 2 + 4;
    }

    // optional float weight_prefer_rotdir = 21;
    if (has_weight_prefer_rotdir()) {
      total_size += 2 + 4;
    }

    // optional float weight_acc_lim_theta = 22;
    if (has_weight_acc_lim_theta()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optimization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_local_planner.Optimization)
  GOOGLE_DCHECK_NE(&from, this);
  const Optimization* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Optimization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_local_planner.Optimization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_local_planner.Optimization)
    MergeFrom(*source);
  }
}

void Optimization::MergeFrom(const Optimization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_local_planner.Optimization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      no_inner_iterations_ = from.no_inner_iterations_;
    }
    if (cached_has_bits & 0x00000002u) {
      no_outer_iterations_ = from.no_outer_iterations_;
    }
    if (cached_has_bits & 0x00000004u) {
      optimization_activate_ = from.optimization_activate_;
    }
    if (cached_has_bits & 0x00000008u) {
      optimization_verbose_ = from.optimization_verbose_;
    }
    if (cached_has_bits & 0x00000010u) {
      penalty_epsilon_ = from.penalty_epsilon_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_max_vel_x_ = from.weight_max_vel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_max_vel_y_ = from.weight_max_vel_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_max_vel_theta_ = from.weight_max_vel_theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      weight_acc_lim_x_ = from.weight_acc_lim_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      weight_acc_lim_y_ = from.weight_acc_lim_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      weight_acc_lim_thet_ = from.weight_acc_lim_thet_;
    }
    if (cached_has_bits & 0x00000800u) {
      weight_kinematics_nh_ = from.weight_kinematics_nh_;
    }
    if (cached_has_bits & 0x00001000u) {
      weight_kinematics_forward_drive_ = from.weight_kinematics_forward_drive_;
    }
    if (cached_has_bits & 0x00002000u) {
      weight_kinematics_turning_radius_ = from.weight_kinematics_turning_radius_;
    }
    if (cached_has_bits & 0x00004000u) {
      weight_optimaltime_ = from.weight_optimaltime_;
    }
    if (cached_has_bits & 0x00008000u) {
      weight_obstacle_ = from.weight_obstacle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      weight_inflation_ = from.weight_inflation_;
    }
    if (cached_has_bits & 0x00020000u) {
      weight_dynamic_obstacle_ = from.weight_dynamic_obstacle_;
    }
    if (cached_has_bits & 0x00040000u) {
      weight_viapoint_ = from.weight_viapoint_;
    }
    if (cached_has_bits & 0x00080000u) {
      weight_adapt_factor_ = from.weight_adapt_factor_;
    }
    if (cached_has_bits & 0x00100000u) {
      weight_prefer_rotdir_ = from.weight_prefer_rotdir_;
    }
    if (cached_has_bits & 0x00200000u) {
      weight_acc_lim_theta_ = from.weight_acc_lim_theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Optimization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_local_planner.Optimization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optimization::CopyFrom(const Optimization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_local_planner.Optimization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optimization::IsInitialized() const {
  return true;
}

void Optimization::Swap(Optimization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Optimization::InternalSwap(Optimization* other) {
  using std::swap;
  swap(no_inner_iterations_, other->no_inner_iterations_);
  swap(no_outer_iterations_, other->no_outer_iterations_);
  swap(optimization_activate_, other->optimization_activate_);
  swap(optimization_verbose_, other->optimization_verbose_);
  swap(penalty_epsilon_, other->penalty_epsilon_);
  swap(weight_max_vel_x_, other->weight_max_vel_x_);
  swap(weight_max_vel_y_, other->weight_max_vel_y_);
  swap(weight_max_vel_theta_, other->weight_max_vel_theta_);
  swap(weight_acc_lim_x_, other->weight_acc_lim_x_);
  swap(weight_acc_lim_y_, other->weight_acc_lim_y_);
  swap(weight_acc_lim_thet_, other->weight_acc_lim_thet_);
  swap(weight_kinematics_nh_, other->weight_kinematics_nh_);
  swap(weight_kinematics_forward_drive_, other->weight_kinematics_forward_drive_);
  swap(weight_kinematics_turning_radius_, other->weight_kinematics_turning_radius_);
  swap(weight_optimaltime_, other->weight_optimaltime_);
  swap(weight_obstacle_, other->weight_obstacle_);
  swap(weight_inflation_, other->weight_inflation_);
  swap(weight_dynamic_obstacle_, other->weight_dynamic_obstacle_);
  swap(weight_viapoint_, other->weight_viapoint_);
  swap(weight_adapt_factor_, other->weight_adapt_factor_);
  swap(weight_prefer_rotdir_, other->weight_prefer_rotdir_);
  swap(weight_acc_lim_theta_, other->weight_acc_lim_theta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Optimization::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HomotopyClassPlanner::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomotopyClassPlanner::kEnableHomotopyClassPlanningFieldNumber;
const int HomotopyClassPlanner::kEnableMultithreadingFieldNumber;
const int HomotopyClassPlanner::kSimpleExplorationFieldNumber;
const int HomotopyClassPlanner::kMaxNumberClassesFieldNumber;
const int HomotopyClassPlanner::kSelectionObstCostScaleFieldNumber;
const int HomotopyClassPlanner::kSelectionPreferInitialPlanFieldNumber;
const int HomotopyClassPlanner::kSelectionViapointCostScaleFieldNumber;
const int HomotopyClassPlanner::kSelectionCostHysteresisFieldNumber;
const int HomotopyClassPlanner::kSelectionAlternativeTimeCostFieldNumber;
const int HomotopyClassPlanner::kRoadmapGraphNoSamplesFieldNumber;
const int HomotopyClassPlanner::kRoadmapGraphAreaWidthFieldNumber;
const int HomotopyClassPlanner::kRoadmapGraphAreaLengthScaleFieldNumber;
const int HomotopyClassPlanner::kHSignaturePrescalerFieldNumber;
const int HomotopyClassPlanner::kHSignatureThresholdFieldNumber;
const int HomotopyClassPlanner::kObstacleKeypointOffsetFieldNumber;
const int HomotopyClassPlanner::kObstacleHeadingThresholdFieldNumber;
const int HomotopyClassPlanner::kViapointsAllCandidatesFieldNumber;
const int HomotopyClassPlanner::kVisualizeHcGraphFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomotopyClassPlanner::HomotopyClassPlanner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_HomotopyClassPlanner.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_local_planner.HomotopyClassPlanner)
}
HomotopyClassPlanner::HomotopyClassPlanner(const HomotopyClassPlanner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_homotopy_class_planning_, &from.enable_homotopy_class_planning_,
    static_cast<size_t>(reinterpret_cast<char*>(&visualize_hc_graph_) -
    reinterpret_cast<char*>(&enable_homotopy_class_planning_)) + sizeof(visualize_hc_graph_));
  // @@protoc_insertion_point(copy_constructor:roborts_local_planner.HomotopyClassPlanner)
}

void HomotopyClassPlanner::SharedCtor() {
  ::memset(&enable_homotopy_class_planning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visualize_hc_graph_) -
      reinterpret_cast<char*>(&enable_homotopy_class_planning_)) + sizeof(visualize_hc_graph_));
}

HomotopyClassPlanner::~HomotopyClassPlanner() {
  // @@protoc_insertion_point(destructor:roborts_local_planner.HomotopyClassPlanner)
  SharedDtor();
}

void HomotopyClassPlanner::SharedDtor() {
}

void HomotopyClassPlanner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HomotopyClassPlanner::descriptor() {
  ::protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomotopyClassPlanner& HomotopyClassPlanner::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_timed_5felastic_5fband_2eproto::scc_info_HomotopyClassPlanner.base);
  return *internal_default_instance();
}


void HomotopyClassPlanner::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_local_planner.HomotopyClassPlanner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&enable_homotopy_class_planning_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selection_viapoint_cost_scale_) -
        reinterpret_cast<char*>(&enable_homotopy_class_planning_)) + sizeof(selection_viapoint_cost_scale_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&selection_cost_hysteresis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacle_heading_threshold_) -
        reinterpret_cast<char*>(&selection_cost_hysteresis_)) + sizeof(obstacle_heading_threshold_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&viapoints_all_candidates_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visualize_hc_graph_) -
        reinterpret_cast<char*>(&viapoints_all_candidates_)) + sizeof(visualize_hc_graph_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HomotopyClassPlanner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_local_planner.HomotopyClassPlanner)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_homotopy_class_planning = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enable_homotopy_class_planning();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_homotopy_class_planning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_multithreading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_enable_multithreading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_multithreading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool simple_exploration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_simple_exploration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &simple_exploration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_number_classes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_number_classes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_number_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float selection_obst_cost_scale = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_selection_obst_cost_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &selection_obst_cost_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float selection_prefer_initial_plan = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_selection_prefer_initial_plan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &selection_prefer_initial_plan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float selection_viapoint_cost_scale = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_selection_viapoint_cost_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &selection_viapoint_cost_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float selection_cost_hysteresis = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_selection_cost_hysteresis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &selection_cost_hysteresis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool selection_alternative_time_cost = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_selection_alternative_time_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selection_alternative_time_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roadmap_graph_no_samples = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_roadmap_graph_no_samples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roadmap_graph_no_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roadmap_graph_area_width = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_roadmap_graph_area_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roadmap_graph_area_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float roadmap_graph_area_length_scale = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_roadmap_graph_area_length_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roadmap_graph_area_length_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float h_signature_prescaler = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_h_signature_prescaler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_signature_prescaler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float h_signature_threshold = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_h_signature_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_signature_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obstacle_keypoint_offset = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_obstacle_keypoint_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obstacle_keypoint_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obstacle_heading_threshold = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_obstacle_heading_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obstacle_heading_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool viapoints_all_candidates = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_viapoints_all_candidates();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &viapoints_all_candidates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool visualize_hc_graph = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_visualize_hc_graph();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visualize_hc_graph_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_local_planner.HomotopyClassPlanner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_local_planner.HomotopyClassPlanner)
  return false;
#undef DO_
}

void HomotopyClassPlanner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_local_planner.HomotopyClassPlanner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_homotopy_class_planning = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_homotopy_class_planning(), output);
  }

  // optional bool enable_multithreading = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_multithreading(), output);
  }

  // optional bool simple_exploration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->simple_exploration(), output);
  }

  // optional int32 max_number_classes = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_number_classes(), output);
  }

  // optional float selection_obst_cost_scale = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->selection_obst_cost_scale(), output);
  }

  // optional float selection_prefer_initial_plan = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->selection_prefer_initial_plan(), output);
  }

  // optional float selection_viapoint_cost_scale = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->selection_viapoint_cost_scale(), output);
  }

  // optional float selection_cost_hysteresis = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->selection_cost_hysteresis(), output);
  }

  // optional bool selection_alternative_time_cost = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->selection_alternative_time_cost(), output);
  }

  // optional int32 roadmap_graph_no_samples = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roadmap_graph_no_samples(), output);
  }

  // optional int32 roadmap_graph_area_width = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->roadmap_graph_area_width(), output);
  }

  // optional float roadmap_graph_area_length_scale = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->roadmap_graph_area_length_scale(), output);
  }

  // optional float h_signature_prescaler = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->h_signature_prescaler(), output);
  }

  // optional float h_signature_threshold = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->h_signature_threshold(), output);
  }

  // optional float obstacle_keypoint_offset = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->obstacle_keypoint_offset(), output);
  }

  // optional float obstacle_heading_threshold = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->obstacle_heading_threshold(), output);
  }

  // optional bool viapoints_all_candidates = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->viapoints_all_candidates(), output);
  }

  // optional bool visualize_hc_graph = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->visualize_hc_graph(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_local_planner.HomotopyClassPlanner)
}

::google::protobuf::uint8* HomotopyClassPlanner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_local_planner.HomotopyClassPlanner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_homotopy_class_planning = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_homotopy_class_planning(), target);
  }

  // optional bool enable_multithreading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_multithreading(), target);
  }

  // optional bool simple_exploration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->simple_exploration(), target);
  }

  // optional int32 max_number_classes = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_number_classes(), target);
  }

  // optional float selection_obst_cost_scale = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->selection_obst_cost_scale(), target);
  }

  // optional float selection_prefer_initial_plan = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->selection_prefer_initial_plan(), target);
  }

  // optional float selection_viapoint_cost_scale = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->selection_viapoint_cost_scale(), target);
  }

  // optional float selection_cost_hysteresis = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->selection_cost_hysteresis(), target);
  }

  // optional bool selection_alternative_time_cost = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->selection_alternative_time_cost(), target);
  }

  // optional int32 roadmap_graph_no_samples = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roadmap_graph_no_samples(), target);
  }

  // optional int32 roadmap_graph_area_width = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->roadmap_graph_area_width(), target);
  }

  // optional float roadmap_graph_area_length_scale = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->roadmap_graph_area_length_scale(), target);
  }

  // optional float h_signature_prescaler = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->h_signature_prescaler(), target);
  }

  // optional float h_signature_threshold = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->h_signature_threshold(), target);
  }

  // optional float obstacle_keypoint_offset = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->obstacle_keypoint_offset(), target);
  }

  // optional float obstacle_heading_threshold = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->obstacle_heading_threshold(), target);
  }

  // optional bool viapoints_all_candidates = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->viapoints_all_candidates(), target);
  }

  // optional bool visualize_hc_graph = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->visualize_hc_graph(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_local_planner.HomotopyClassPlanner)
  return target;
}

size_t HomotopyClassPlanner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_local_planner.HomotopyClassPlanner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool enable_homotopy_class_planning = 1;
    if (has_enable_homotopy_class_planning()) {
      total_size += 1 + 1;
    }

    // optional bool enable_multithreading = 2;
    if (has_enable_multithreading()) {
      total_size += 1 + 1;
    }

    // optional bool simple_exploration = 3;
    if (has_simple_exploration()) {
      total_size += 1 + 1;
    }

    // optional bool selection_alternative_time_cost = 9;
    if (has_selection_alternative_time_cost()) {
      total_size += 1 + 1;
    }

    // optional int32 max_number_classes = 4;
    if (has_max_number_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_number_classes());
    }

    // optional float selection_obst_cost_scale = 5;
    if (has_selection_obst_cost_scale()) {
      total_size += 1 + 4;
    }

    // optional float selection_prefer_initial_plan = 6;
    if (has_selection_prefer_initial_plan()) {
      total_size += 1 + 4;
    }

    // optional float selection_viapoint_cost_scale = 7;
    if (has_selection_viapoint_cost_scale()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float selection_cost_hysteresis = 8;
    if (has_selection_cost_hysteresis()) {
      total_size += 1 + 4;
    }

    // optional int32 roadmap_graph_no_samples = 10;
    if (has_roadmap_graph_no_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roadmap_graph_no_samples());
    }

    // optional int32 roadmap_graph_area_width = 11;
    if (has_roadmap_graph_area_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roadmap_graph_area_width());
    }

    // optional float roadmap_graph_area_length_scale = 12;
    if (has_roadmap_graph_area_length_scale()) {
      total_size += 1 + 4;
    }

    // optional float h_signature_prescaler = 13;
    if (has_h_signature_prescaler()) {
      total_size += 1 + 4;
    }

    // optional float h_signature_threshold = 14;
    if (has_h_signature_threshold()) {
      total_size += 1 + 4;
    }

    // optional float obstacle_keypoint_offset = 15;
    if (has_obstacle_keypoint_offset()) {
      total_size += 1 + 4;
    }

    // optional float obstacle_heading_threshold = 16;
    if (has_obstacle_heading_threshold()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional bool viapoints_all_candidates = 17;
    if (has_viapoints_all_candidates()) {
      total_size += 2 + 1;
    }

    // optional bool visualize_hc_graph = 18;
    if (has_visualize_hc_graph()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HomotopyClassPlanner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_local_planner.HomotopyClassPlanner)
  GOOGLE_DCHECK_NE(&from, this);
  const HomotopyClassPlanner* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomotopyClassPlanner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_local_planner.HomotopyClassPlanner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_local_planner.HomotopyClassPlanner)
    MergeFrom(*source);
  }
}

void HomotopyClassPlanner::MergeFrom(const HomotopyClassPlanner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_local_planner.HomotopyClassPlanner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      enable_homotopy_class_planning_ = from.enable_homotopy_class_planning_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_multithreading_ = from.enable_multithreading_;
    }
    if (cached_has_bits & 0x00000004u) {
      simple_exploration_ = from.simple_exploration_;
    }
    if (cached_has_bits & 0x00000008u) {
      selection_alternative_time_cost_ = from.selection_alternative_time_cost_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_number_classes_ = from.max_number_classes_;
    }
    if (cached_has_bits & 0x00000020u) {
      selection_obst_cost_scale_ = from.selection_obst_cost_scale_;
    }
    if (cached_has_bits & 0x00000040u) {
      selection_prefer_initial_plan_ = from.selection_prefer_initial_plan_;
    }
    if (cached_has_bits & 0x00000080u) {
      selection_viapoint_cost_scale_ = from.selection_viapoint_cost_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      selection_cost_hysteresis_ = from.selection_cost_hysteresis_;
    }
    if (cached_has_bits & 0x00000200u) {
      roadmap_graph_no_samples_ = from.roadmap_graph_no_samples_;
    }
    if (cached_has_bits & 0x00000400u) {
      roadmap_graph_area_width_ = from.roadmap_graph_area_width_;
    }
    if (cached_has_bits & 0x00000800u) {
      roadmap_graph_area_length_scale_ = from.roadmap_graph_area_length_scale_;
    }
    if (cached_has_bits & 0x00001000u) {
      h_signature_prescaler_ = from.h_signature_prescaler_;
    }
    if (cached_has_bits & 0x00002000u) {
      h_signature_threshold_ = from.h_signature_threshold_;
    }
    if (cached_has_bits & 0x00004000u) {
      obstacle_keypoint_offset_ = from.obstacle_keypoint_offset_;
    }
    if (cached_has_bits & 0x00008000u) {
      obstacle_heading_threshold_ = from.obstacle_heading_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      viapoints_all_candidates_ = from.viapoints_all_candidates_;
    }
    if (cached_has_bits & 0x00020000u) {
      visualize_hc_graph_ = from.visualize_hc_graph_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HomotopyClassPlanner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_local_planner.HomotopyClassPlanner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomotopyClassPlanner::CopyFrom(const HomotopyClassPlanner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_local_planner.HomotopyClassPlanner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomotopyClassPlanner::IsInitialized() const {
  return true;
}

void HomotopyClassPlanner::Swap(HomotopyClassPlanner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomotopyClassPlanner::InternalSwap(HomotopyClassPlanner* other) {
  using std::swap;
  swap(enable_homotopy_class_planning_, other->enable_homotopy_class_planning_);
  swap(enable_multithreading_, other->enable_multithreading_);
  swap(simple_exploration_, other->simple_exploration_);
  swap(selection_alternative_time_cost_, other->selection_alternative_time_cost_);
  swap(max_number_classes_, other->max_number_classes_);
  swap(selection_obst_cost_scale_, other->selection_obst_cost_scale_);
  swap(selection_prefer_initial_plan_, other->selection_prefer_initial_plan_);
  swap(selection_viapoint_cost_scale_, other->selection_viapoint_cost_scale_);
  swap(selection_cost_hysteresis_, other->selection_cost_hysteresis_);
  swap(roadmap_graph_no_samples_, other->roadmap_graph_no_samples_);
  swap(roadmap_graph_area_width_, other->roadmap_graph_area_width_);
  swap(roadmap_graph_area_length_scale_, other->roadmap_graph_area_length_scale_);
  swap(h_signature_prescaler_, other->h_signature_prescaler_);
  swap(h_signature_threshold_, other->h_signature_threshold_);
  swap(obstacle_keypoint_offset_, other->obstacle_keypoint_offset_);
  swap(obstacle_heading_threshold_, other->obstacle_heading_threshold_);
  swap(viapoints_all_candidates_, other->viapoints_all_candidates_);
  swap(visualize_hc_graph_, other->visualize_hc_graph_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HomotopyClassPlanner::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Recovery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Recovery::kShrinkHorizonMinDurationFieldNumber;
const int Recovery::kOscillationRecoveryFieldNumber;
const int Recovery::kShrinkHorizonBackupFieldNumber;
const int Recovery::kOscillationVEpsFieldNumber;
const int Recovery::kOscillationOmegaEpsFieldNumber;
const int Recovery::kOscillationRecoveryMinDurationFieldNumber;
const int Recovery::kOscillationFilterDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Recovery::Recovery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Recovery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_local_planner.Recovery)
}
Recovery::Recovery(const Recovery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&oscillation_v_eps_, &from.oscillation_v_eps_,
    static_cast<size_t>(reinterpret_cast<char*>(&shrink_horizon_backup_) -
    reinterpret_cast<char*>(&oscillation_v_eps_)) + sizeof(shrink_horizon_backup_));
  // @@protoc_insertion_point(copy_constructor:roborts_local_planner.Recovery)
}

void Recovery::SharedCtor() {
  ::memset(&oscillation_v_eps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shrink_horizon_backup_) -
      reinterpret_cast<char*>(&oscillation_v_eps_)) + sizeof(shrink_horizon_backup_));
}

Recovery::~Recovery() {
  // @@protoc_insertion_point(destructor:roborts_local_planner.Recovery)
  SharedDtor();
}

void Recovery::SharedDtor() {
}

void Recovery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Recovery::descriptor() {
  ::protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Recovery& Recovery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_timed_5felastic_5fband_2eproto::scc_info_Recovery.base);
  return *internal_default_instance();
}


void Recovery::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_local_planner.Recovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&oscillation_v_eps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shrink_horizon_backup_) -
        reinterpret_cast<char*>(&oscillation_v_eps_)) + sizeof(shrink_horizon_backup_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Recovery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_local_planner.Recovery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool shrink_horizon_min_duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_shrink_horizon_min_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shrink_horizon_min_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool oscillation_recovery = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_oscillation_recovery();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oscillation_recovery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shrink_horizon_backup = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_shrink_horizon_backup();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shrink_horizon_backup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double oscillation_v_eps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_oscillation_v_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &oscillation_v_eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double oscillation_omega_eps = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_oscillation_omega_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &oscillation_omega_eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double oscillation_recovery_min_duration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_oscillation_recovery_min_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &oscillation_recovery_min_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double oscillation_filter_duration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_oscillation_filter_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &oscillation_filter_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_local_planner.Recovery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_local_planner.Recovery)
  return false;
#undef DO_
}

void Recovery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_local_planner.Recovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool shrink_horizon_min_duration = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->shrink_horizon_min_duration(), output);
  }

  // optional bool oscillation_recovery = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->oscillation_recovery(), output);
  }

  // optional bool shrink_horizon_backup = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shrink_horizon_backup(), output);
  }

  // optional double oscillation_v_eps = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->oscillation_v_eps(), output);
  }

  // optional double oscillation_omega_eps = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->oscillation_omega_eps(), output);
  }

  // optional double oscillation_recovery_min_duration = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->oscillation_recovery_min_duration(), output);
  }

  // optional double oscillation_filter_duration = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->oscillation_filter_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_local_planner.Recovery)
}

::google::protobuf::uint8* Recovery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_local_planner.Recovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool shrink_horizon_min_duration = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->shrink_horizon_min_duration(), target);
  }

  // optional bool oscillation_recovery = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->oscillation_recovery(), target);
  }

  // optional bool shrink_horizon_backup = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shrink_horizon_backup(), target);
  }

  // optional double oscillation_v_eps = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->oscillation_v_eps(), target);
  }

  // optional double oscillation_omega_eps = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->oscillation_omega_eps(), target);
  }

  // optional double oscillation_recovery_min_duration = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->oscillation_recovery_min_duration(), target);
  }

  // optional double oscillation_filter_duration = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->oscillation_filter_duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_local_planner.Recovery)
  return target;
}

size_t Recovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_local_planner.Recovery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double oscillation_v_eps = 4;
    if (has_oscillation_v_eps()) {
      total_size += 1 + 8;
    }

    // optional double oscillation_omega_eps = 5;
    if (has_oscillation_omega_eps()) {
      total_size += 1 + 8;
    }

    // optional double oscillation_recovery_min_duration = 6;
    if (has_oscillation_recovery_min_duration()) {
      total_size += 1 + 8;
    }

    // optional double oscillation_filter_duration = 7;
    if (has_oscillation_filter_duration()) {
      total_size += 1 + 8;
    }

    // optional bool shrink_horizon_min_duration = 1;
    if (has_shrink_horizon_min_duration()) {
      total_size += 1 + 1;
    }

    // optional bool oscillation_recovery = 2;
    if (has_oscillation_recovery()) {
      total_size += 1 + 1;
    }

    // optional bool shrink_horizon_backup = 3;
    if (has_shrink_horizon_backup()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Recovery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_local_planner.Recovery)
  GOOGLE_DCHECK_NE(&from, this);
  const Recovery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Recovery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_local_planner.Recovery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_local_planner.Recovery)
    MergeFrom(*source);
  }
}

void Recovery::MergeFrom(const Recovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_local_planner.Recovery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      oscillation_v_eps_ = from.oscillation_v_eps_;
    }
    if (cached_has_bits & 0x00000002u) {
      oscillation_omega_eps_ = from.oscillation_omega_eps_;
    }
    if (cached_has_bits & 0x00000004u) {
      oscillation_recovery_min_duration_ = from.oscillation_recovery_min_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      oscillation_filter_duration_ = from.oscillation_filter_duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      shrink_horizon_min_duration_ = from.shrink_horizon_min_duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      oscillation_recovery_ = from.oscillation_recovery_;
    }
    if (cached_has_bits & 0x00000040u) {
      shrink_horizon_backup_ = from.shrink_horizon_backup_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Recovery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_local_planner.Recovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recovery::CopyFrom(const Recovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_local_planner.Recovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recovery::IsInitialized() const {
  return true;
}

void Recovery::Swap(Recovery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Recovery::InternalSwap(Recovery* other) {
  using std::swap;
  swap(oscillation_v_eps_, other->oscillation_v_eps_);
  swap(oscillation_omega_eps_, other->oscillation_omega_eps_);
  swap(oscillation_recovery_min_duration_, other->oscillation_recovery_min_duration_);
  swap(oscillation_filter_duration_, other->oscillation_filter_duration_);
  swap(shrink_horizon_min_duration_, other->shrink_horizon_min_duration_);
  swap(oscillation_recovery_, other->oscillation_recovery_);
  swap(shrink_horizon_backup_, other->shrink_horizon_backup_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Recovery::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Config::InitAsDefaultInstance() {
  ::roborts_local_planner::_Config_default_instance_._instance.get_mutable()->opt_frame_ = const_cast< ::roborts_local_planner::FrameID*>(
      ::roborts_local_planner::FrameID::internal_default_instance());
  ::roborts_local_planner::_Config_default_instance_._instance.get_mutable()->trajectory_opt_ = const_cast< ::roborts_local_planner::Trajectory*>(
      ::roborts_local_planner::Trajectory::internal_default_instance());
  ::roborts_local_planner::_Config_default_instance_._instance.get_mutable()->kinematics_opt_ = const_cast< ::roborts_local_planner::Robot*>(
      ::roborts_local_planner::Robot::internal_default_instance());
  ::roborts_local_planner::_Config_default_instance_._instance.get_mutable()->tolerance_opt_ = const_cast< ::roborts_local_planner::GoalTolerance*>(
      ::roborts_local_planner::GoalTolerance::internal_default_instance());
  ::roborts_local_planner::_Config_default_instance_._instance.get_mutable()->obstacles_opt_ = const_cast< ::roborts_local_planner::Obstacles*>(
      ::roborts_local_planner::Obstacles::internal_default_instance());
  ::roborts_local_planner::_Config_default_instance_._instance.get_mutable()->optimize_info_ = const_cast< ::roborts_local_planner::Optimization*>(
      ::roborts_local_planner::Optimization::internal_default_instance());
  ::roborts_local_planner::_Config_default_instance_._instance.get_mutable()->hcp_opt_ = const_cast< ::roborts_local_planner::HomotopyClassPlanner*>(
      ::roborts_local_planner::HomotopyClassPlanner::internal_default_instance());
  ::roborts_local_planner::_Config_default_instance_._instance.get_mutable()->recovery_info_ = const_cast< ::roborts_local_planner::Recovery*>(
      ::roborts_local_planner::Recovery::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kOptFrameFieldNumber;
const int Config::kTrajectoryOptFieldNumber;
const int Config::kKinematicsOptFieldNumber;
const int Config::kToleranceOptFieldNumber;
const int Config::kObstaclesOptFieldNumber;
const int Config::kOptimizeInfoFieldNumber;
const int Config::kHcpOptFieldNumber;
const int Config::kRobotTypeFieldNumber;
const int Config::kRecoveryInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_timed_5felastic_5fband_2eproto::scc_info_Config.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_local_planner.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      robot_type_(from.robot_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_opt_frame()) {
    opt_frame_ = new ::roborts_local_planner::FrameID(*from.opt_frame_);
  } else {
    opt_frame_ = NULL;
  }
  if (from.has_trajectory_opt()) {
    trajectory_opt_ = new ::roborts_local_planner::Trajectory(*from.trajectory_opt_);
  } else {
    trajectory_opt_ = NULL;
  }
  if (from.has_kinematics_opt()) {
    kinematics_opt_ = new ::roborts_local_planner::Robot(*from.kinematics_opt_);
  } else {
    kinematics_opt_ = NULL;
  }
  if (from.has_tolerance_opt()) {
    tolerance_opt_ = new ::roborts_local_planner::GoalTolerance(*from.tolerance_opt_);
  } else {
    tolerance_opt_ = NULL;
  }
  if (from.has_obstacles_opt()) {
    obstacles_opt_ = new ::roborts_local_planner::Obstacles(*from.obstacles_opt_);
  } else {
    obstacles_opt_ = NULL;
  }
  if (from.has_optimize_info()) {
    optimize_info_ = new ::roborts_local_planner::Optimization(*from.optimize_info_);
  } else {
    optimize_info_ = NULL;
  }
  if (from.has_hcp_opt()) {
    hcp_opt_ = new ::roborts_local_planner::HomotopyClassPlanner(*from.hcp_opt_);
  } else {
    hcp_opt_ = NULL;
  }
  if (from.has_recovery_info()) {
    recovery_info_ = new ::roborts_local_planner::Recovery(*from.recovery_info_);
  } else {
    recovery_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:roborts_local_planner.Config)
}

void Config::SharedCtor() {
  ::memset(&opt_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recovery_info_) -
      reinterpret_cast<char*>(&opt_frame_)) + sizeof(recovery_info_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:roborts_local_planner.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != internal_default_instance()) delete opt_frame_;
  if (this != internal_default_instance()) delete trajectory_opt_;
  if (this != internal_default_instance()) delete kinematics_opt_;
  if (this != internal_default_instance()) delete tolerance_opt_;
  if (this != internal_default_instance()) delete obstacles_opt_;
  if (this != internal_default_instance()) delete optimize_info_;
  if (this != internal_default_instance()) delete hcp_opt_;
  if (this != internal_default_instance()) delete recovery_info_;
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  ::protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config& Config::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_timed_5felastic_5fband_2eproto::scc_info_Config.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_local_planner.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(opt_frame_ != NULL);
      opt_frame_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trajectory_opt_ != NULL);
      trajectory_opt_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(kinematics_opt_ != NULL);
      kinematics_opt_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tolerance_opt_ != NULL);
      tolerance_opt_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(obstacles_opt_ != NULL);
      obstacles_opt_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(optimize_info_ != NULL);
      optimize_info_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(hcp_opt_ != NULL);
      hcp_opt_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(recovery_info_ != NULL);
      recovery_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_local_planner.Config)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .roborts_local_planner.FrameID opt_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_opt_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .roborts_local_planner.Trajectory trajectory_opt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .roborts_local_planner.Robot kinematics_opt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kinematics_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .roborts_local_planner.GoalTolerance tolerance_opt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tolerance_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .roborts_local_planner.Obstacles obstacles_opt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obstacles_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .roborts_local_planner.Optimization optimize_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_optimize_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .roborts_local_planner.HomotopyClassPlanner hcp_opt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcp_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .roborts_local_planner.FootprintModel robot_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_robot_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .roborts_local_planner.Recovery recovery_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recovery_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_local_planner.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_local_planner.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_local_planner.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .roborts_local_planner.FrameID opt_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_opt_frame(), output);
  }

  // optional .roborts_local_planner.Trajectory trajectory_opt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_trajectory_opt(), output);
  }

  // optional .roborts_local_planner.Robot kinematics_opt = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_kinematics_opt(), output);
  }

  // optional .roborts_local_planner.GoalTolerance tolerance_opt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_tolerance_opt(), output);
  }

  // optional .roborts_local_planner.Obstacles obstacles_opt = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_obstacles_opt(), output);
  }

  // optional .roborts_local_planner.Optimization optimize_info = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_optimize_info(), output);
  }

  // optional .roborts_local_planner.HomotopyClassPlanner hcp_opt = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_hcp_opt(), output);
  }

  // repeated .roborts_local_planner.FootprintModel robot_type = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_type_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->robot_type(static_cast<int>(i)),
      output);
  }

  // optional .roborts_local_planner.Recovery recovery_info = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_recovery_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_local_planner.Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_local_planner.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .roborts_local_planner.FrameID opt_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_opt_frame(), deterministic, target);
  }

  // optional .roborts_local_planner.Trajectory trajectory_opt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_trajectory_opt(), deterministic, target);
  }

  // optional .roborts_local_planner.Robot kinematics_opt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_kinematics_opt(), deterministic, target);
  }

  // optional .roborts_local_planner.GoalTolerance tolerance_opt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_tolerance_opt(), deterministic, target);
  }

  // optional .roborts_local_planner.Obstacles obstacles_opt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_obstacles_opt(), deterministic, target);
  }

  // optional .roborts_local_planner.Optimization optimize_info = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_optimize_info(), deterministic, target);
  }

  // optional .roborts_local_planner.HomotopyClassPlanner hcp_opt = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_hcp_opt(), deterministic, target);
  }

  // repeated .roborts_local_planner.FootprintModel robot_type = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_type_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->robot_type(static_cast<int>(i)), deterministic, target);
  }

  // optional .roborts_local_planner.Recovery recovery_info = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_recovery_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_local_planner.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_local_planner.Config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .roborts_local_planner.FootprintModel robot_type = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->robot_type_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->robot_type(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .roborts_local_planner.FrameID opt_frame = 1;
    if (has_opt_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opt_frame_);
    }

    // optional .roborts_local_planner.Trajectory trajectory_opt = 2;
    if (has_trajectory_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trajectory_opt_);
    }

    // optional .roborts_local_planner.Robot kinematics_opt = 3;
    if (has_kinematics_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *kinematics_opt_);
    }

    // optional .roborts_local_planner.GoalTolerance tolerance_opt = 4;
    if (has_tolerance_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tolerance_opt_);
    }

    // optional .roborts_local_planner.Obstacles obstacles_opt = 5;
    if (has_obstacles_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *obstacles_opt_);
    }

    // optional .roborts_local_planner.Optimization optimize_info = 6;
    if (has_optimize_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *optimize_info_);
    }

    // optional .roborts_local_planner.HomotopyClassPlanner hcp_opt = 7;
    if (has_hcp_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *hcp_opt_);
    }

    // optional .roborts_local_planner.Recovery recovery_info = 9;
    if (has_recovery_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *recovery_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_local_planner.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_local_planner.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_local_planner.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_local_planner.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_type_.MergeFrom(from.robot_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_opt_frame()->::roborts_local_planner::FrameID::MergeFrom(from.opt_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_trajectory_opt()->::roborts_local_planner::Trajectory::MergeFrom(from.trajectory_opt());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_kinematics_opt()->::roborts_local_planner::Robot::MergeFrom(from.kinematics_opt());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tolerance_opt()->::roborts_local_planner::GoalTolerance::MergeFrom(from.tolerance_opt());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_obstacles_opt()->::roborts_local_planner::Obstacles::MergeFrom(from.obstacles_opt());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_optimize_info()->::roborts_local_planner::Optimization::MergeFrom(from.optimize_info());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_hcp_opt()->::roborts_local_planner::HomotopyClassPlanner::MergeFrom(from.hcp_opt());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_recovery_info()->::roborts_local_planner::Recovery::MergeFrom(from.recovery_info());
    }
  }
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_local_planner.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_local_planner.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  using std::swap;
  CastToBase(&robot_type_)->InternalSwap(CastToBase(&other->robot_type_));
  swap(opt_frame_, other->opt_frame_);
  swap(trajectory_opt_, other->trajectory_opt_);
  swap(kinematics_opt_, other->kinematics_opt_);
  swap(tolerance_opt_, other->tolerance_opt_);
  swap(obstacles_opt_, other->obstacles_opt_);
  swap(optimize_info_, other->optimize_info_);
  swap(hcp_opt_, other->hcp_opt_);
  swap(recovery_info_, other->recovery_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roborts_local_planner
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_local_planner::FrameID* Arena::CreateMaybeMessage< ::roborts_local_planner::FrameID >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_local_planner::FrameID >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_local_planner::Point2D* Arena::CreateMaybeMessage< ::roborts_local_planner::Point2D >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_local_planner::Point2D >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_local_planner::Trajectory* Arena::CreateMaybeMessage< ::roborts_local_planner::Trajectory >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_local_planner::Trajectory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_local_planner::FootprintModel* Arena::CreateMaybeMessage< ::roborts_local_planner::FootprintModel >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_local_planner::FootprintModel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_local_planner::Robot* Arena::CreateMaybeMessage< ::roborts_local_planner::Robot >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_local_planner::Robot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_local_planner::GoalTolerance* Arena::CreateMaybeMessage< ::roborts_local_planner::GoalTolerance >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_local_planner::GoalTolerance >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_local_planner::Obstacles* Arena::CreateMaybeMessage< ::roborts_local_planner::Obstacles >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_local_planner::Obstacles >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_local_planner::Optimization* Arena::CreateMaybeMessage< ::roborts_local_planner::Optimization >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_local_planner::Optimization >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_local_planner::HomotopyClassPlanner* Arena::CreateMaybeMessage< ::roborts_local_planner::HomotopyClassPlanner >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_local_planner::HomotopyClassPlanner >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_local_planner::Recovery* Arena::CreateMaybeMessage< ::roborts_local_planner::Recovery >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_local_planner::Recovery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_local_planner::Config* Arena::CreateMaybeMessage< ::roborts_local_planner::Config >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_local_planner::Config >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
